Package compiler ;


Helpers
    all = [0 .. 0xFFFF] ;
  	digit = ['0' .. '9'] ;
  	nonzero_digit = ['1' .. '9'] ;
  	letter = ['a' .. 'z'] | ['A' .. 'Z'] ;
  	nondigit = ['_' + letter] ;
  	/*ex digit_sequence*/
  	sign = '+' | '-' ;
  	hexadecimal_digit = digit | ['a' .. 'f'] | ['A' .. 'F'] ;
  	escape_sequence = '\' ('n' | 't' | 'r' | '0' | '\' | ''' | '"' | ('x' hexadecimal_digit+ hexadecimal_digit+)) ;
  	cr = 13 ;
    lf = 10 ;
    tab = 9 ;
    /*ex s_char*/
    s_char = ([all - [''' + ['"' + ['\' + [lf + cr]]]]] | escape_sequence) ;
  	/*ex s_string*/
  	not_dollar = [all - '$'] ;
  	not_double_dollar = [not_dollar - '$'] ;
  	line_comment = '$' all* ;
    multiline_comment = '$$' not_dollar* '$'+ (not_double_dollar not_dollar* '$'+)* '$' ;

Tokens
  	int_const = digit+;
  	char_const = ''' s_char ''' ;
  	s_char_sequence = (''' s_char ''')+ ;
  	string_literal = '"' ((''' s_char ''')+) '"' ;

    /* keywords */
    and = 'and' ;
    char = 'char' ;
    div = 'div' ;
    do = 'do' ;
    else = 'else' ;
    fun = 'fun' ;
    if = 'if' ;
    int = 'int' ;
    mod = 'mod' ;
    not = 'not' ;
    nothing = 'nothing' ;
    or = 'or' ;
    ref = 'ref' ;
    return = 'return' ;
    then = 'then' ;
    var = 'var' ;
    while = 'while' ;

    /* names */
    id = letter (digit | nondigit)* ;

    /* symbolic operators */
    plus = '+' ;
  	minus = '-' ;
  	division = '/' ;
  	mult = '*' ;
  	hashtag = '#' ;
  	equal = '=' ;
  	unequal = '<>' ;
  	lesser = '<' ;
  	greater = '>' ;
  	lesseq = '<=' ;
  	greateq = '>=' ;

    /* separators */
    comma = ',' ;
  	colon = ':' ;
  	semicolon = ';' ;
  	assignment = '<-' ;
  	l_par = '(' ;
  	r_par = ')' ;
  	l_bracket = '[' ;
  	r_bracket = ']' ;
  	l_brace = '{' ;
  	r_brace = '}' ;

  	identifier = nondigit (digit | nondigit)* ;
  	blank = (cr | lf | tab | ' ')+ ;
    comment = line_comment | multiline_comment ;

Ignored Tokens
    blank,
  	comment;

Productions
    program = func_def ;
    func_def = header local_def* block ;
    /*yiannis's code*/
    args = semicolon fpar_def;
    header = fun id l_par fpar_def args* r_par colon ret_type ;
    vars = comma id;
    /*[ref] instead of ref*/
    fpar_def = ref id vars* colon fpar_type ;
    data_type =
        {integer} int |
        {character} char ;
    /*yiannis's code*/
    dt = l_bracket int_const r_bracket ;
    type = data_type dt* ;
    ret_type =
        {datatype} data_type |
        {nuffin} nothing ;
    ft = l_bracket int_const r_bracket;
    /*[l_bracket r_bracket] instead of l_bracket r_bracket*/
    fpar_type = data_type l_bracket r_bracket ft* ;
    local_def =
        {functiondefinition} func_def |
        {functiondeclaration} func_decl |
        {variabledefinition} var_def ;
    variable = comma id;
    var_def = var id variable* colon type semicolon ;
    func_decl = header semicolon ;
    else_case = else stmt ;
    stmt =
        {stmtoption0} semicolon |
        {stmtoption1} l_value assignment expr semicolon |
        {stmtoption2} block |
        {stmtoption3} func_call semicolon |
            /*[ else stmt ] instead of else stmt*/
         {stmtoption4} if cond then stmt else_case |
            /*[ expr ] instead of expr*/
         {stmtoption5} while cond do stmt |
         {stmtoption6} return expr semicolon ;
    block = l_brace stmt* r_brace ;
    fun_args = comma expr;
    /*[ expr fun_args* ] instead of expr fun_args**/
    func_call = id l_par expr fun_args* r_par ;
    l_value =
        {opt0} id |
        {opt1} string_literal |
        {opt2} l_value l_bracket expr r_bracket ;
    /*yiannis's code*/
    prakseis1 =
        {plus1} plus |
        {minus1} minus;
    /*yiannis's code*/
    prakseis2 =
        {plus2} plus |
        {minus2} minus |
        {mult2} mult |
        {div2} div |
        {mod2} mod;
    next_expr =prakseis2 expr;
    expr =
        {intconst} int_const |
        {charconst} char_const |
        {lval} l_value |
        {functioncall} func_call |
        {lpar} l_par expr r_par |
        {pr1expr} prakseis1 expr |
        {exprpr2expr} expr next_expr ;
    cond1 =
        {and1} and |
        {or1} or;
    cond2 =
        {equal2} equal |
        {hashtag2} hashtag |
        {unequal2} unequal |
        {lesser2} lesser |
        {greater2} greater |
        {lesseq2} lesseq |
        {greateq2} greateq;
    next_cond = cond1 cond;
    next_exp = cond2 expr;
    cond =
        {condition1} l_par cond r_par |
        {condition2} not cond |
        {condition3} cond next_cond |
        {condition4} expr next_exp ;

Package compiler;


Helpers

    all = [0 .. 255] ;
  	digit = ['0' .. '9'] ;
  	nonzero_digit = ['1' .. '9'] ;
  	letter = ['a' .. 'z'] | ['A' .. 'Z'] ;
  	nondigit = '_' | letter ;
  	sign = '+' | '-' ;
  	hexadecimal_digit = digit | ['a' .. 'f'] | ['A' .. 'F'] ;
  	escape_sequence = '\' ('n' | 't' | 'r' | '0' | '\' | ''' | '"' | ('x' hexadecimal_digit+ hexadecimal_digit+)) ;
  	cr = 13 ;
    lf = 10 ;
    tab = 9 ;
    no_lf = [all - lf] ;                                       /*added by yiannis*/
    /*xrisimopoitai sta sxolia mias grammis (einai xaraktires xwris allagi grammis kai mia */
    /* allagi grammis */
    s_char = ([all - [''' + ['"' + ['\' + [lf + cr]]]]] | escape_sequence) ;
  	not_dollar = [all - '$'] ;
    /*comments*/
    conatins_one_dollar = not_dollar+ '$' not_dollar+ ;                 /*added by yiannis*/


Tokens

    /* keywords */
    and = 'and' ;
    char = 'char' ;
    div = 'div' ;
    do = 'do' ;
    else = 'else' ;
    fun = 'fun' ;
    if = 'if' ;
    int = 'int' ;
    mod = 'mod' ;
    not = 'not' ;
    nothing = 'nothing' ;
    or = 'or' ;
    ref = 'ref' ;
    return = 'return' ;
    then = 'then' ;
    var = 'var' ;
    while = 'while' ;

    /* names */
    id = letter (digit | nondigit)* ;

    /*int and character constants, strings*/
    int_const = digit+ ;
    char_const = ''' s_char ''' ;
    s_char_sequence = (''' s_char ''')+ ;
    string_literal = '"' (s_char+) '"' ;

    /* symbolic operators */
    plus = '+' ;
  	minus = '-' ;
  	mult = '*' ;
  	division = '/' ;
  	hashtag = '#' ;
  	equal = '=' ;
  	lesser = '<' ;
  	greater = '>' ;
  	lesseq = '<=' ;
  	greateq = '>=' ;
  	unequal = '<>' ;

    /* separators */
  	l_par = '(' ;
  	r_par = ')' ;
  	l_bracket = '[' ;
  	r_bracket = ']' ;
  	l_brace = '{' ;
  	r_brace = '}' ;
    comma = ',' ;
  	semicolon = ';' ;
  	colon = ':' ;
  	assignment = '<-' ;

  	identifier = nondigit (digit | nondigit)* ;

  	blank = (cr | lf | tab | ' ')+ ;
    /*epeidi pleon einai tokens de ginetai na xrismopoi8oun gia na dilwsoun allo token*/
    line_comment = '$' not_dollar no_lf* lf ;                      /*added by yiannis*/
    multiline_comment = '$$' not_dollar* '$$' | '$$' conatins_one_dollar* '$$' ;  /*added by yiannis*/
    /*ousiastika i deuteri grammi kaluptei pragmata tis morfis $$ fwef $ fwefew $ .. $ e $$*/


Ignored Tokens

    blank,
    line_comment,                                    /*added by yiannis*/
  	multiline_comment;                                 /*added by yiannis*/


Productions

    program = func_def ;

    func_def = header local_def* block ;

    header = fun id l_par header_params? r_par colon ret_type ; /*because, we may have no pars at all e.g. hello example*/
    header_params = fpar_def header_next_arg* ;
    header_next_arg = semicolon fpar_def ;

    fpar_def = ref? id fpar_def_next_id* colon fpar_type ;
    fpar_def_next_id = comma id ;

    data_type =
        {int} int |
        {char} char ;

    type = data_type dimension* ;
    dimension = l_bracket int_const r_bracket ;

    ret_type =
        {data_type} data_type |
        {nothing} nothing ;

    fpar_type = data_type l_r_brackets? next_dimension* ;
    l_r_brackets = l_bracket r_bracket ;
    next_dimension = l_bracket int_const r_bracket ;

    local_def =
        {func_def} func_def |
        {func_decl} func_decl |
        {var_def} var_def ;

    var_def = var id var_def_next_id* colon type semicolon ;
    var_def_next_id = comma id ;

    func_decl = header semicolon ;

    stmt =
        {terminal} term_stmt |
        {if} if_stmt |
        {while} while cond do stmt ;
    if_stmt =
        {if} if cond then stmt |
        {if_else} if cond then with_else else stmt ;    /*original line*/
    with_else =
        {nested_if_else} if cond then with_else else_with_else |
        {terminal_statement} term_stmt ;
    else_with_else = else with_else ;
    term_stmt =
        {semicolon} semicolon |
        {assignment} l_value assignment expr semicolon |
        {block} block |
        {function} func_call semicolon |
        {return_expr} return expr ;   /*added by yiannis*/

    block = l_brace stmt* r_brace ;

    func_call = id l_par func_args? r_par ;
    func_args = expr func_call_next_arg* ;
    func_call_next_arg = comma expr;

    l_value =
        {id} id |
        {string} string_literal |
        {expression} l_value l_bracket expr r_bracket ;

    expr =
        {signed} signed_expr |
        {expr_plus_term} expr plus term |
        {expr_minus_term} expr minus term |
        {term} term ;
    signed_expr =
        {sign_int_const} sign int_const |
        {sign_char_const} sign char_const |
        {sign_l_value} sign l_value |
        {sign_func_call} sign func_call |
        {sign_expr_in_pars} sign expr_in_pars ;
    sign =
        {plus_sign} plus |
        {minus_sign} minus ;
    term =
        {term_mult_factor} term mult factor |
        {term_div_factor} term div factor |
        {term_mod_factor} term mod factor |                                                /*yiannis code*/
        {factor} factor ;
    factor =
        {int_const} int_const |
        {char_const} char_const |
        {l_value} l_value |
        {func_call} func_call |
        {expr_in_pars} expr_in_pars;
    expr_in_pars = l_par expr r_par ;

    cond =
        {not} not_cond |
        {cond_and_termcond} cond and termcond |
        {cond_or_termcond} cond or termcond |
        {termcond} termcond ;
    not_cond =
        {not_not_cond} not not_cond |
        {not_termcond} not termcond ;
    termcond =
        {cond_in_pars} cond_in_pars |
        {expr_numop_expr} expr numop_expr ;
    cond_in_pars = l_par cond r_par ;
    numop_expr = numop expr ;
    numop =
        {equal} equal |
        {hashtag} hashtag |
        {unequal} unequal |
        {lesser} lesser |
        {greater} greater |
        {lesseq} lesseq |
        {greateq} greateq ;

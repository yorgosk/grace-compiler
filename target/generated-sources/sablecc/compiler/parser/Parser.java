/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAfuncdef1FuncDef */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AAfuncdef2FuncDef */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAheader1Header */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AAheader2Header */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AAheaderparams1HeaderParams */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AAheaderparams2HeaderParams */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AHeaderNextArg */
		    {
			ArrayList list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AAfpardef1FparDef */
		    {
			ArrayList list = new8();
			push(goTo(5), list, false);
		    }
		    break;
                    case 9: /* reduce AAfpardef2FparDef */
		    {
			ArrayList list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce AAfpardef3FparDef */
		    {
			ArrayList list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce AAfpardef4FparDef */
		    {
			ArrayList list = new11();
			push(goTo(5), list, false);
		    }
		    break;
                    case 12: /* reduce AFparDefNextId */
		    {
			ArrayList list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AIntDataType */
		    {
			ArrayList list = new13();
			push(goTo(7), list, false);
		    }
		    break;
                    case 14: /* reduce ACharDataType */
		    {
			ArrayList list = new14();
			push(goTo(7), list, false);
		    }
		    break;
                    case 15: /* reduce AAtype1Type */
		    {
			ArrayList list = new15();
			push(goTo(8), list, false);
		    }
		    break;
                    case 16: /* reduce AAtype2Type */
		    {
			ArrayList list = new16();
			push(goTo(8), list, false);
		    }
		    break;
                    case 17: /* reduce ADimension */
		    {
			ArrayList list = new17();
			push(goTo(9), list, false);
		    }
		    break;
                    case 18: /* reduce ADataTypeRetType */
		    {
			ArrayList list = new18();
			push(goTo(10), list, false);
		    }
		    break;
                    case 19: /* reduce ANothingRetType */
		    {
			ArrayList list = new19();
			push(goTo(10), list, false);
		    }
		    break;
                    case 20: /* reduce AAfpartype1FparType */
		    {
			ArrayList list = new20();
			push(goTo(11), list, false);
		    }
		    break;
                    case 21: /* reduce AAfpartype2FparType */
		    {
			ArrayList list = new21();
			push(goTo(11), list, false);
		    }
		    break;
                    case 22: /* reduce AAfpartype3FparType */
		    {
			ArrayList list = new22();
			push(goTo(11), list, false);
		    }
		    break;
                    case 23: /* reduce AAfpartype4FparType */
		    {
			ArrayList list = new23();
			push(goTo(11), list, false);
		    }
		    break;
                    case 24: /* reduce ALRBrackets */
		    {
			ArrayList list = new24();
			push(goTo(12), list, false);
		    }
		    break;
                    case 25: /* reduce ANextDimension */
		    {
			ArrayList list = new25();
			push(goTo(13), list, false);
		    }
		    break;
                    case 26: /* reduce AFuncDefLocalDef */
		    {
			ArrayList list = new26();
			push(goTo(14), list, false);
		    }
		    break;
                    case 27: /* reduce AFuncDeclLocalDef */
		    {
			ArrayList list = new27();
			push(goTo(14), list, false);
		    }
		    break;
                    case 28: /* reduce AVarDefLocalDef */
		    {
			ArrayList list = new28();
			push(goTo(14), list, false);
		    }
		    break;
                    case 29: /* reduce AAvardef1VarDef */
		    {
			ArrayList list = new29();
			push(goTo(15), list, false);
		    }
		    break;
                    case 30: /* reduce AAvardef2VarDef */
		    {
			ArrayList list = new30();
			push(goTo(15), list, false);
		    }
		    break;
                    case 31: /* reduce AVarDefNextId */
		    {
			ArrayList list = new31();
			push(goTo(16), list, false);
		    }
		    break;
                    case 32: /* reduce AFuncDecl */
		    {
			ArrayList list = new32();
			push(goTo(17), list, false);
		    }
		    break;
                    case 33: /* reduce ATerminalStmt */
		    {
			ArrayList list = new33();
			push(goTo(18), list, false);
		    }
		    break;
                    case 34: /* reduce AIfStmt */
		    {
			ArrayList list = new34();
			push(goTo(18), list, false);
		    }
		    break;
                    case 35: /* reduce AWhileStmt */
		    {
			ArrayList list = new35();
			push(goTo(18), list, false);
		    }
		    break;
                    case 36: /* reduce AIfIfStmt */
		    {
			ArrayList list = new36();
			push(goTo(19), list, false);
		    }
		    break;
                    case 37: /* reduce AIfElseIfStmt */
		    {
			ArrayList list = new37();
			push(goTo(19), list, false);
		    }
		    break;
                    case 38: /* reduce ANestedIfElseWithElse */
		    {
			ArrayList list = new38();
			push(goTo(20), list, false);
		    }
		    break;
                    case 39: /* reduce ATerminalWithElse */
		    {
			ArrayList list = new39();
			push(goTo(20), list, false);
		    }
		    break;
                    case 40: /* reduce AElseWithElse */
		    {
			ArrayList list = new40();
			push(goTo(21), list, false);
		    }
		    break;
                    case 41: /* reduce ASemicolonTermStmt */
		    {
			ArrayList list = new41();
			push(goTo(22), list, false);
		    }
		    break;
                    case 42: /* reduce AAssignmentTermStmt */
		    {
			ArrayList list = new42();
			push(goTo(22), list, false);
		    }
		    break;
                    case 43: /* reduce ABlockTermStmt */
		    {
			ArrayList list = new43();
			push(goTo(22), list, false);
		    }
		    break;
                    case 44: /* reduce AFunctionTermStmt */
		    {
			ArrayList list = new44();
			push(goTo(22), list, false);
		    }
		    break;
                    case 45: /* reduce AReturnExprTermStmt */
		    {
			ArrayList list = new45();
			push(goTo(22), list, false);
		    }
		    break;
                    case 46: /* reduce AAblock1Block */
		    {
			ArrayList list = new46();
			push(goTo(23), list, false);
		    }
		    break;
                    case 47: /* reduce AAblock2Block */
		    {
			ArrayList list = new47();
			push(goTo(23), list, false);
		    }
		    break;
                    case 48: /* reduce AAfunccall1FuncCall */
		    {
			ArrayList list = new48();
			push(goTo(24), list, false);
		    }
		    break;
                    case 49: /* reduce AAfunccall2FuncCall */
		    {
			ArrayList list = new49();
			push(goTo(24), list, false);
		    }
		    break;
                    case 50: /* reduce AAfuncargs1FuncArgs */
		    {
			ArrayList list = new50();
			push(goTo(25), list, false);
		    }
		    break;
                    case 51: /* reduce AAfuncargs2FuncArgs */
		    {
			ArrayList list = new51();
			push(goTo(25), list, false);
		    }
		    break;
                    case 52: /* reduce AFuncCallNextArg */
		    {
			ArrayList list = new52();
			push(goTo(26), list, false);
		    }
		    break;
                    case 53: /* reduce AIdLValue */
		    {
			ArrayList list = new53();
			push(goTo(27), list, false);
		    }
		    break;
                    case 54: /* reduce AStringLValue */
		    {
			ArrayList list = new54();
			push(goTo(27), list, false);
		    }
		    break;
                    case 55: /* reduce AExpressionLValue */
		    {
			ArrayList list = new55();
			push(goTo(27), list, false);
		    }
		    break;
                    case 56: /* reduce ASignedExpr */
		    {
			ArrayList list = new56();
			push(goTo(28), list, false);
		    }
		    break;
                    case 57: /* reduce AExprPlusTermExpr */
		    {
			ArrayList list = new57();
			push(goTo(28), list, false);
		    }
		    break;
                    case 58: /* reduce AExprMinusTermExpr */
		    {
			ArrayList list = new58();
			push(goTo(28), list, false);
		    }
		    break;
                    case 59: /* reduce ATermExpr */
		    {
			ArrayList list = new59();
			push(goTo(28), list, false);
		    }
		    break;
                    case 60: /* reduce ASignIntConstSignedExpr */
		    {
			ArrayList list = new60();
			push(goTo(29), list, false);
		    }
		    break;
                    case 61: /* reduce ASignCharConstSignedExpr */
		    {
			ArrayList list = new61();
			push(goTo(29), list, false);
		    }
		    break;
                    case 62: /* reduce ASignLValueSignedExpr */
		    {
			ArrayList list = new62();
			push(goTo(29), list, false);
		    }
		    break;
                    case 63: /* reduce ASignFuncCallSignedExpr */
		    {
			ArrayList list = new63();
			push(goTo(29), list, false);
		    }
		    break;
                    case 64: /* reduce ASignExprInParsSignedExpr */
		    {
			ArrayList list = new64();
			push(goTo(29), list, false);
		    }
		    break;
                    case 65: /* reduce APlusSignSign */
		    {
			ArrayList list = new65();
			push(goTo(30), list, false);
		    }
		    break;
                    case 66: /* reduce AMinusSignSign */
		    {
			ArrayList list = new66();
			push(goTo(30), list, false);
		    }
		    break;
                    case 67: /* reduce ATermMultFactorTerm */
		    {
			ArrayList list = new67();
			push(goTo(31), list, false);
		    }
		    break;
                    case 68: /* reduce ATermDivFactorTerm */
		    {
			ArrayList list = new68();
			push(goTo(31), list, false);
		    }
		    break;
                    case 69: /* reduce ATermDivisionFactorTerm */
		    {
			ArrayList list = new69();
			push(goTo(31), list, false);
		    }
		    break;
                    case 70: /* reduce ATermModFactorTerm */
		    {
			ArrayList list = new70();
			push(goTo(31), list, false);
		    }
		    break;
                    case 71: /* reduce AFactorTerm */
		    {
			ArrayList list = new71();
			push(goTo(31), list, false);
		    }
		    break;
                    case 72: /* reduce AIntConstFactor */
		    {
			ArrayList list = new72();
			push(goTo(32), list, false);
		    }
		    break;
                    case 73: /* reduce ACharConstFactor */
		    {
			ArrayList list = new73();
			push(goTo(32), list, false);
		    }
		    break;
                    case 74: /* reduce ALValueFactor */
		    {
			ArrayList list = new74();
			push(goTo(32), list, false);
		    }
		    break;
                    case 75: /* reduce AFuncCallFactor */
		    {
			ArrayList list = new75();
			push(goTo(32), list, false);
		    }
		    break;
                    case 76: /* reduce AExprInParsFactor */
		    {
			ArrayList list = new76();
			push(goTo(32), list, false);
		    }
		    break;
                    case 77: /* reduce AExprInPars */
		    {
			ArrayList list = new77();
			push(goTo(33), list, false);
		    }
		    break;
                    case 78: /* reduce ANotCond */
		    {
			ArrayList list = new78();
			push(goTo(34), list, false);
		    }
		    break;
                    case 79: /* reduce ACondAndTermcondCond */
		    {
			ArrayList list = new79();
			push(goTo(34), list, false);
		    }
		    break;
                    case 80: /* reduce ACondOrTermcondCond */
		    {
			ArrayList list = new80();
			push(goTo(34), list, false);
		    }
		    break;
                    case 81: /* reduce ATermcondCond */
		    {
			ArrayList list = new81();
			push(goTo(34), list, false);
		    }
		    break;
                    case 82: /* reduce ANotNotCondNotCond */
		    {
			ArrayList list = new82();
			push(goTo(35), list, false);
		    }
		    break;
                    case 83: /* reduce ANotTermcondNotCond */
		    {
			ArrayList list = new83();
			push(goTo(35), list, false);
		    }
		    break;
                    case 84: /* reduce ACondInParsTermcond */
		    {
			ArrayList list = new84();
			push(goTo(36), list, false);
		    }
		    break;
                    case 85: /* reduce AExprNumopExprTermcond */
		    {
			ArrayList list = new85();
			push(goTo(36), list, false);
		    }
		    break;
                    case 86: /* reduce ACondInPars */
		    {
			ArrayList list = new86();
			push(goTo(37), list, false);
		    }
		    break;
                    case 87: /* reduce ANumopExpr */
		    {
			ArrayList list = new87();
			push(goTo(38), list, false);
		    }
		    break;
                    case 88: /* reduce AEqualNumop */
		    {
			ArrayList list = new88();
			push(goTo(39), list, false);
		    }
		    break;
                    case 89: /* reduce AHashtagNumop */
		    {
			ArrayList list = new89();
			push(goTo(39), list, false);
		    }
		    break;
                    case 90: /* reduce AUnequalNumop */
		    {
			ArrayList list = new90();
			push(goTo(39), list, false);
		    }
		    break;
                    case 91: /* reduce ALesserNumop */
		    {
			ArrayList list = new91();
			push(goTo(39), list, false);
		    }
		    break;
                    case 92: /* reduce AGreaterNumop */
		    {
			ArrayList list = new92();
			push(goTo(39), list, false);
		    }
		    break;
                    case 93: /* reduce ALesseqNumop */
		    {
			ArrayList list = new93();
			push(goTo(39), list, false);
		    }
		    break;
                    case 94: /* reduce AGreateqNumop */
		    {
			ArrayList list = new94();
			push(goTo(39), list, false);
		    }
		    break;
                    case 95: /* reduce ATerminal$LocalDef */
		    {
			ArrayList list = new95();
			push(goTo(40), list, true);
		    }
		    break;
                    case 96: /* reduce ANonTerminal$LocalDef */
		    {
			ArrayList list = new96();
			push(goTo(40), list, true);
		    }
		    break;
                    case 97: /* reduce ATerminal$HeaderNextArg */
		    {
			ArrayList list = new97();
			push(goTo(41), list, true);
		    }
		    break;
                    case 98: /* reduce ANonTerminal$HeaderNextArg */
		    {
			ArrayList list = new98();
			push(goTo(41), list, true);
		    }
		    break;
                    case 99: /* reduce ATerminal$FparDefNextId */
		    {
			ArrayList list = new99();
			push(goTo(42), list, true);
		    }
		    break;
                    case 100: /* reduce ANonTerminal$FparDefNextId */
		    {
			ArrayList list = new100();
			push(goTo(42), list, true);
		    }
		    break;
                    case 101: /* reduce ATerminal$Dimension */
		    {
			ArrayList list = new101();
			push(goTo(43), list, true);
		    }
		    break;
                    case 102: /* reduce ANonTerminal$Dimension */
		    {
			ArrayList list = new102();
			push(goTo(43), list, true);
		    }
		    break;
                    case 103: /* reduce ATerminal$NextDimension */
		    {
			ArrayList list = new103();
			push(goTo(44), list, true);
		    }
		    break;
                    case 104: /* reduce ANonTerminal$NextDimension */
		    {
			ArrayList list = new104();
			push(goTo(44), list, true);
		    }
		    break;
                    case 105: /* reduce ATerminal$VarDefNextId */
		    {
			ArrayList list = new105();
			push(goTo(45), list, true);
		    }
		    break;
                    case 106: /* reduce ANonTerminal$VarDefNextId */
		    {
			ArrayList list = new106();
			push(goTo(45), list, true);
		    }
		    break;
                    case 107: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new107();
			push(goTo(46), list, true);
		    }
		    break;
                    case 108: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new108();
			push(goTo(46), list, true);
		    }
		    break;
                    case 109: /* reduce ATerminal$FuncCallNextArg */
		    {
			ArrayList list = new109();
			push(goTo(47), list, true);
		    }
		    break;
                    case 110: /* reduce ANonTerminal$FuncCallNextArg */
		    {
			ArrayList list = new110();
			push(goTo(47), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfuncdefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAfuncdef1FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode3 = new LinkedList();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAfuncdef2FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode4 = new LinkedList();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        prettypeNode8 = (PRetType)nodeArrayList6.get(0);

        pheaderNode1 = new AHeader(tfunNode2, tidNode3, tlparNode4, null, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TLPar tlparNode4;
        PHeaderParams pheaderparamsNode5;
        TRPar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pheaderparamsNode5 = (PHeaderParams)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        prettypeNode8 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader(tfunNode2, tidNode3, tlparNode4, pheaderparamsNode5, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAheaderparams1HeaderParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeaderParams pheaderparamsNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList listNode3 = new LinkedList();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        }

        pheaderparamsNode1 = new AHeaderParams(pfpardefNode2, listNode3);
        }
	nodeList.add(pheaderparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAheaderparams2HeaderParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeaderParams pheaderparamsNode1;
        {
            // Block
        PFparDef pfpardefNode2;
        LinkedList listNode4 = new LinkedList();
        pfpardefNode2 = (PFparDef)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pheaderparamsNode1 = new AHeaderParams(pfpardefNode2, listNode4);
        }
	nodeList.add(pheaderparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AHeaderNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeaderNextArg pheadernextargNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PFparDef pfpardefNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pfpardefNode3 = (PFparDef)nodeArrayList2.get(0);

        pheadernextargNode1 = new AHeaderNextArg(tsemicolonNode2, pfpardefNode3);
        }
	nodeList.add(pheadernextargNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TColon tcolonNode5;
        PFparType pfpartypeNode6;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        tcolonNode5 = (TColon)nodeArrayList2.get(0);
        pfpartypeNode6 = (PFparType)nodeArrayList3.get(0);

        pfpardefNode1 = new AFparDef(null, tidNode3, listNode4, tcolonNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TColon tcolonNode5;
        PFparType pfpartypeNode6;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        pfpartypeNode6 = (PFparType)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef(trefNode2, tidNode3, listNode4, tcolonNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAfpardef3FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TColon tcolonNode6;
        PFparType pfpartypeNode7;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcolonNode6 = (TColon)nodeArrayList3.get(0);
        pfpartypeNode7 = (PFparType)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef(null, tidNode3, listNode5, tcolonNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAfpardef4FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TColon tcolonNode6;
        PFparType pfpartypeNode7;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        pfpartypeNode7 = (PFparType)nodeArrayList5.get(0);

        pfpardefNode1 = new AFparDef(trefNode2, tidNode3, listNode5, tcolonNode6, pfpartypeNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AFparDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDefNextId pfpardefnextidNode1;
        {
            // Block
        TComma tcommaNode2;
        TId tidNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pfpardefnextidNode1 = new AFparDefNextId(tcommaNode2, tidNode3);
        }
	nodeList.add(pfpardefnextidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntDataType(tintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ACharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharDataType(tcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode3 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ADimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDimension pdimensionNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TIntConst tintconstNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        tintconstNode3 = (TIntConst)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pdimensionNode1 = new ADimension(tlbracketNode2, tintconstNode3, trbracketNode4);
        }
	nodeList.add(pdimensionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ADataTypeRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ADataTypeRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ANothingRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ANothingRetType(tnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAfpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, null, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAfpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PLRBrackets plrbracketsNode3;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        plrbracketsNode3 = (PLRBrackets)nodeArrayList2.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, plrbracketsNode3, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAfpartype3FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, null, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAfpartype4FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PLRBrackets plrbracketsNode3;
        LinkedList listNode5 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        plrbracketsNode3 = (PLRBrackets)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, plrbracketsNode3, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ALRBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLRBrackets plrbracketsNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TRBracket trbracketNode3;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        trbracketNode3 = (TRBracket)nodeArrayList2.get(0);

        plrbracketsNode1 = new ALRBrackets(tlbracketNode2, trbracketNode3);
        }
	nodeList.add(plrbracketsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ANextDimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNextDimension pnextdimensionNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TIntConst tintconstNode3;
        TRBracket trbracketNode4;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        tintconstNode3 = (TIntConst)nodeArrayList2.get(0);
        trbracketNode4 = (TRBracket)nodeArrayList3.get(0);

        pnextdimensionNode1 = new ANextDimension(tlbracketNode2, tintconstNode3, trbracketNode4);
        }
	nodeList.add(pnextdimensionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AFuncDefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDefLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AFuncDeclLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDeclLocalDef(pfuncdeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AVarDefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVarDefLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAvardef1VarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TColon tcolonNode5;
        PType ptypeNode6;
        TSemicolon tsemicolonNode7;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        ptypeNode6 = (PType)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pvardefNode1 = new AVarDef(tvarNode2, tidNode3, listNode4, tcolonNode5, ptypeNode6, tsemicolonNode7);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAvardef2VarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TColon tcolonNode6;
        PType ptypeNode7;
        TSemicolon tsemicolonNode8;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        ptypeNode7 = (PType)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pvardefNode1 = new AVarDef(tvarNode2, tidNode3, listNode5, tcolonNode6, ptypeNode7, tsemicolonNode8);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AVarDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDefNextId pvardefnextidNode1;
        {
            // Block
        TComma tcommaNode2;
        TId tidNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvardefnextidNode1 = new AVarDefNextId(tcommaNode2, tidNode3);
        }
	nodeList.add(pvardefnextidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSemicolon tsemicolonNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pfuncdeclNode1 = new AFuncDecl(pheaderNode2, tsemicolonNode3);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ATerminalStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PTermStmt ptermstmtNode2;
        ptermstmtNode2 = (PTermStmt)nodeArrayList1.get(0);

        pstmtNode1 = new ATerminalStmt(ptermstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIfStmt pifstmtNode2;
        pifstmtNode2 = (PIfStmt)nodeArrayList1.get(0);

        pstmtNode1 = new AIfStmt(pifstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        PCond pcondNode3;
        TDo tdoNode4;
        PStmt pstmtNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AWhileStmt(twhileNode2, pcondNode3, tdoNode4, pstmtNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AIfIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        TThen tthenNode4;
        PStmt pstmtNode5;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);

        pifstmtNode1 = new AIfIfStmt(tifNode2, pcondNode3, tthenNode4, pstmtNode5);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AIfElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        TThen tthenNode4;
        PWithElse pwithelseNode5;
        TElse telseNode6;
        PStmt pstmtNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pwithelseNode5 = (PWithElse)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pstmtNode7 = (PStmt)nodeArrayList6.get(0);

        pifstmtNode1 = new AIfElseIfStmt(tifNode2, pcondNode3, tthenNode4, pwithelseNode5, telseNode6, pstmtNode7);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ANestedIfElseWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWithElse pwithelseNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        TThen tthenNode4;
        PWithElse pwithelseNode5;
        PElseWithElse pelsewithelseNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pwithelseNode5 = (PWithElse)nodeArrayList4.get(0);
        pelsewithelseNode6 = (PElseWithElse)nodeArrayList5.get(0);

        pwithelseNode1 = new ANestedIfElseWithElse(tifNode2, pcondNode3, tthenNode4, pwithelseNode5, pelsewithelseNode6);
        }
	nodeList.add(pwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ATerminalWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWithElse pwithelseNode1;
        {
            // Block
        PTermStmt ptermstmtNode2;
        ptermstmtNode2 = (PTermStmt)nodeArrayList1.get(0);

        pwithelseNode1 = new ATerminalWithElse(ptermstmtNode2);
        }
	nodeList.add(pwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AElseWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PElseWithElse pelsewithelseNode1;
        {
            // Block
        TElse telseNode2;
        PWithElse pwithelseNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pwithelseNode3 = (PWithElse)nodeArrayList2.get(0);

        pelsewithelseNode1 = new AElseWithElse(telseNode2, pwithelseNode3);
        }
	nodeList.add(pelsewithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ASemicolonTermStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermStmt ptermstmtNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        ptermstmtNode1 = new ASemicolonTermStmt(tsemicolonNode2);
        }
	nodeList.add(ptermstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAssignmentTermStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermStmt ptermstmtNode1;
        {
            // Block
        PLValue plvalueNode2;
        TAssignment tassignmentNode3;
        PExpr pexprNode4;
        TSemicolon tsemicolonNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        ptermstmtNode1 = new AAssignmentTermStmt(plvalueNode2, tassignmentNode3, pexprNode4, tsemicolonNode5);
        }
	nodeList.add(ptermstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ABlockTermStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermStmt ptermstmtNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        ptermstmtNode1 = new ABlockTermStmt(pblockNode2);
        }
	nodeList.add(ptermstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AFunctionTermStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermStmt ptermstmtNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        TSemicolon tsemicolonNode3;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        ptermstmtNode1 = new AFunctionTermStmt(pfunccallNode2, tsemicolonNode3);
        }
	nodeList.add(ptermstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AReturnExprTermStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermStmt ptermstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        ptermstmtNode1 = new AReturnExprTermStmt(treturnNode2, pexprNode3, tsemicolonNode4);
        }
	nodeList.add(ptermstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode3 = new LinkedList();
        TRBrace trbraceNode4;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRBrace)nodeArrayList2.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList listNode4 = new LinkedList();
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunccallNode1 = new AFuncCall(tidNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AAfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        TLPar tlparNode3;
        PFuncArgs pfuncargsNode4;
        TRPar trparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pfuncargsNode4 = (PFuncArgs)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunccallNode1 = new AFuncCall(tidNode2, tlparNode3, pfuncargsNode4, trparNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AAfuncargs1FuncArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncArgs pfuncargsNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList listNode3 = new LinkedList();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pfuncargsNode1 = new AFuncArgs(pexprNode2, listNode3);
        }
	nodeList.add(pfuncargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAfuncargs2FuncArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncArgs pfuncargsNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList listNode4 = new LinkedList();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfuncargsNode1 = new AFuncArgs(pexprNode2, listNode4);
        }
	nodeList.add(pfuncargsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AFuncCallNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCallNextArg pfunccallnextargNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pfunccallnextargNode1 = new AFuncCallNextArg(tcommaNode2, pexprNode3);
        }
	nodeList.add(pfunccallnextargNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AIdLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plvalueNode1 = new AIdLValue(tidNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AStringLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        plvalueNode1 = new AStringLValue(tstringliteralNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AExpressionLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        TLBracket tlbracketNode3;
        PExpr pexprNode4;
        TRBracket trbracketNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trbracketNode5 = (TRBracket)nodeArrayList4.get(0);

        plvalueNode1 = new AExpressionLValue(plvalueNode2, tlbracketNode3, pexprNode4, trbracketNode5);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce ASignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PSignedExpr psignedexprNode2;
        psignedexprNode2 = (PSignedExpr)nodeArrayList1.get(0);

        pexprNode1 = new ASignedExpr(psignedexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AExprPlusTermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AExprPlusTermExpr(pexprNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AExprMinusTermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AExprMinusTermExpr(pexprNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprNode1 = new ATermExpr(ptermNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce ASignIntConstSignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedExpr psignedexprNode1;
        {
            // Block
        PSign psignNode2;
        TIntConst tintconstNode3;
        psignNode2 = (PSign)nodeArrayList1.get(0);
        tintconstNode3 = (TIntConst)nodeArrayList2.get(0);

        psignedexprNode1 = new ASignIntConstSignedExpr(psignNode2, tintconstNode3);
        }
	nodeList.add(psignedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ASignCharConstSignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedExpr psignedexprNode1;
        {
            // Block
        PSign psignNode2;
        TCharConst tcharconstNode3;
        psignNode2 = (PSign)nodeArrayList1.get(0);
        tcharconstNode3 = (TCharConst)nodeArrayList2.get(0);

        psignedexprNode1 = new ASignCharConstSignedExpr(psignNode2, tcharconstNode3);
        }
	nodeList.add(psignedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ASignLValueSignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedExpr psignedexprNode1;
        {
            // Block
        PSign psignNode2;
        PLValue plvalueNode3;
        psignNode2 = (PSign)nodeArrayList1.get(0);
        plvalueNode3 = (PLValue)nodeArrayList2.get(0);

        psignedexprNode1 = new ASignLValueSignedExpr(psignNode2, plvalueNode3);
        }
	nodeList.add(psignedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ASignFuncCallSignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedExpr psignedexprNode1;
        {
            // Block
        PSign psignNode2;
        PFuncCall pfunccallNode3;
        psignNode2 = (PSign)nodeArrayList1.get(0);
        pfunccallNode3 = (PFuncCall)nodeArrayList2.get(0);

        psignedexprNode1 = new ASignFuncCallSignedExpr(psignNode2, pfunccallNode3);
        }
	nodeList.add(psignedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ASignExprInParsSignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSignedExpr psignedexprNode1;
        {
            // Block
        PSign psignNode2;
        PExprInPars pexprinparsNode3;
        psignNode2 = (PSign)nodeArrayList1.get(0);
        pexprinparsNode3 = (PExprInPars)nodeArrayList2.get(0);

        psignedexprNode1 = new ASignExprInParsSignedExpr(psignNode2, pexprinparsNode3);
        }
	nodeList.add(psignedexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce APlusSignSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        psignNode1 = new APlusSignSign(tplusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AMinusSignSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSign psignNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        psignNode1 = new AMinusSignSign(tminusNode2);
        }
	nodeList.add(psignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ATermMultFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMult tmultNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ATermMultFactorTerm(ptermNode2, tmultNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ATermDivFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TDiv tdivNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ATermDivFactorTerm(ptermNode2, tdivNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ATermDivisionFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TDivision tdivisionNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivisionNode3 = (TDivision)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ATermDivisionFactorTerm(ptermNode2, tdivisionNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ATermModFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMod tmodNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ATermModFactorTerm(ptermNode2, tmodNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AIntConstFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList1.get(0);

        pfactorNode1 = new AIntConstFactor(tintconstNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ACharConstFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        pfactorNode1 = new ACharConstFactor(tcharconstNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ALValueFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PLValue plvalueNode2;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);

        pfactorNode1 = new ALValueFactor(plvalueNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AFuncCallFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pfactorNode1 = new AFuncCallFactor(pfunccallNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AExprInParsFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PExprInPars pexprinparsNode2;
        pexprinparsNode2 = (PExprInPars)nodeArrayList1.get(0);

        pfactorNode1 = new AExprInParsFactor(pexprinparsNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AExprInPars */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprInPars pexprinparsNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexprinparsNode1 = new AExprInPars(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pexprinparsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ANotCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PNotCond pnotcondNode2;
        pnotcondNode2 = (PNotCond)nodeArrayList1.get(0);

        pcondNode1 = new ANotCond(pnotcondNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ACondAndTermcondCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        TAnd tandNode3;
        PTermcond ptermcondNode4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        ptermcondNode4 = (PTermcond)nodeArrayList3.get(0);

        pcondNode1 = new ACondAndTermcondCond(pcondNode2, tandNode3, ptermcondNode4);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ACondOrTermcondCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        TOr torNode3;
        PTermcond ptermcondNode4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        ptermcondNode4 = (PTermcond)nodeArrayList3.get(0);

        pcondNode1 = new ACondOrTermcondCond(pcondNode2, torNode3, ptermcondNode4);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce ATermcondCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PTermcond ptermcondNode2;
        ptermcondNode2 = (PTermcond)nodeArrayList1.get(0);

        pcondNode1 = new ATermcondCond(ptermcondNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ANotNotCondNotCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNotCond pnotcondNode1;
        {
            // Block
        TNot tnotNode2;
        PNotCond pnotcondNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pnotcondNode3 = (PNotCond)nodeArrayList2.get(0);

        pnotcondNode1 = new ANotNotCondNotCond(tnotNode2, pnotcondNode3);
        }
	nodeList.add(pnotcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ANotTermcondNotCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNotCond pnotcondNode1;
        {
            // Block
        TNot tnotNode2;
        PTermcond ptermcondNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        ptermcondNode3 = (PTermcond)nodeArrayList2.get(0);

        pnotcondNode1 = new ANotTermcondNotCond(tnotNode2, ptermcondNode3);
        }
	nodeList.add(pnotcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce ACondInParsTermcond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermcond ptermcondNode1;
        {
            // Block
        PCondInPars pcondinparsNode2;
        pcondinparsNode2 = (PCondInPars)nodeArrayList1.get(0);

        ptermcondNode1 = new ACondInParsTermcond(pcondinparsNode2);
        }
	nodeList.add(ptermcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AExprNumopExprTermcond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermcond ptermcondNode1;
        {
            // Block
        PExpr pexprNode2;
        PNumopExpr pnumopexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pnumopexprNode3 = (PNumopExpr)nodeArrayList2.get(0);

        ptermcondNode1 = new AExprNumopExprTermcond(pexprNode2, pnumopexprNode3);
        }
	nodeList.add(ptermcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce ACondInPars */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondInPars pcondinparsNode1;
        {
            // Block
        TLPar tlparNode2;
        PCond pcondNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pcondinparsNode1 = new ACondInPars(tlparNode2, pcondNode3, trparNode4);
        }
	nodeList.add(pcondinparsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce ANumopExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumopExpr pnumopexprNode1;
        {
            // Block
        PNumop pnumopNode2;
        PExpr pexprNode3;
        pnumopNode2 = (PNumop)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pnumopexprNode1 = new ANumopExpr(pnumopNode2, pexprNode3);
        }
	nodeList.add(pnumopexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AEqualNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumop pnumopNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pnumopNode1 = new AEqualNumop(tequalNode2);
        }
	nodeList.add(pnumopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AHashtagNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumop pnumopNode1;
        {
            // Block
        THashtag thashtagNode2;
        thashtagNode2 = (THashtag)nodeArrayList1.get(0);

        pnumopNode1 = new AHashtagNumop(thashtagNode2);
        }
	nodeList.add(pnumopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce AUnequalNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumop pnumopNode1;
        {
            // Block
        TUnequal tunequalNode2;
        tunequalNode2 = (TUnequal)nodeArrayList1.get(0);

        pnumopNode1 = new AUnequalNumop(tunequalNode2);
        }
	nodeList.add(pnumopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ALesserNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumop pnumopNode1;
        {
            // Block
        TLesser tlesserNode2;
        tlesserNode2 = (TLesser)nodeArrayList1.get(0);

        pnumopNode1 = new ALesserNumop(tlesserNode2);
        }
	nodeList.add(pnumopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce AGreaterNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumop pnumopNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        pnumopNode1 = new AGreaterNumop(tgreaterNode2);
        }
	nodeList.add(pnumopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ALesseqNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumop pnumopNode1;
        {
            // Block
        TLesseq tlesseqNode2;
        tlesseqNode2 = (TLesseq)nodeArrayList1.get(0);

        pnumopNode1 = new ALesseqNumop(tlesseqNode2);
        }
	nodeList.add(pnumopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce AGreateqNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumop pnumopNode1;
        {
            // Block
        TGreateq tgreateqNode2;
        tgreateqNode2 = (TGreateq)nodeArrayList1.get(0);

        pnumopNode1 = new AGreateqNumop(tgreateqNode2);
        }
	nodeList.add(pnumopNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ATerminal$HeaderNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PHeaderNextArg pheadernextargNode1;
        pheadernextargNode1 = (PHeaderNextArg)nodeArrayList1.get(0);
	if(pheadernextargNode1 != null)
	{
	  listNode2.add(pheadernextargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce ANonTerminal$HeaderNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PHeaderNextArg pheadernextargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pheadernextargNode2 = (PHeaderNextArg)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pheadernextargNode2 != null)
	{
	  listNode3.add(pheadernextargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ATerminal$FparDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFparDefNextId pfpardefnextidNode1;
        pfpardefnextidNode1 = (PFparDefNextId)nodeArrayList1.get(0);
	if(pfpardefnextidNode1 != null)
	{
	  listNode2.add(pfpardefnextidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce ANonTerminal$FparDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFparDefNextId pfpardefnextidNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfpardefnextidNode2 = (PFparDefNextId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfpardefnextidNode2 != null)
	{
	  listNode3.add(pfpardefnextidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce ATerminal$Dimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PDimension pdimensionNode1;
        pdimensionNode1 = (PDimension)nodeArrayList1.get(0);
	if(pdimensionNode1 != null)
	{
	  listNode2.add(pdimensionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce ANonTerminal$Dimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PDimension pdimensionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdimensionNode2 = (PDimension)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdimensionNode2 != null)
	{
	  listNode3.add(pdimensionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce ATerminal$NextDimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PNextDimension pnextdimensionNode1;
        pnextdimensionNode1 = (PNextDimension)nodeArrayList1.get(0);
	if(pnextdimensionNode1 != null)
	{
	  listNode2.add(pnextdimensionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce ANonTerminal$NextDimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PNextDimension pnextdimensionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextdimensionNode2 = (PNextDimension)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextdimensionNode2 != null)
	{
	  listNode3.add(pnextdimensionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce ATerminal$VarDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVarDefNextId pvardefnextidNode1;
        pvardefnextidNode1 = (PVarDefNextId)nodeArrayList1.get(0);
	if(pvardefnextidNode1 != null)
	{
	  listNode2.add(pvardefnextidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce ANonTerminal$VarDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVarDefNextId pvardefnextidNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardefnextidNode2 = (PVarDefNextId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardefnextidNode2 != null)
	{
	  listNode3.add(pvardefnextidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce ATerminal$FuncCallNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFuncCallNextArg pfunccallnextargNode1;
        pfunccallnextargNode1 = (PFuncCallNextArg)nodeArrayList1.get(0);
	if(pfunccallnextargNode1 != null)
	{
	  listNode2.add(pfunccallnextargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce ANonTerminal$FuncCallNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFuncCallNextArg pfunccallnextargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfunccallnextargNode2 = (PFuncCallNextArg)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunccallnextargNode2 != null)
	{
	  listNode3.add(pfunccallnextargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {5, SHIFT, 1}, },
			{{-1, ERROR, 1}, {17, SHIFT, 5}, },
			{{-1, ERROR, 2}, {44, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {5, SHIFT, 1}, {15, SHIFT, 6}, {37, SHIFT, 7}, },
			{{-1, ERROR, 5}, {33, SHIFT, 15}, },
			{{-1, ERROR, 6}, {17, SHIFT, 16}, },
			{{-1, ERROR, 7}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {37, SHIFT, 7}, {38, SHIFT, 22}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 9}, {5, SHIFT, 1}, {15, SHIFT, 6}, {37, SHIFT, 7}, {40, SHIFT, 31}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 14}, {5, SHIFT, 1}, {15, SHIFT, 6}, {37, SHIFT, 7}, },
			{{-1, ERROR, 15}, {12, SHIFT, 34}, {17, SHIFT, 35}, {34, SHIFT, 36}, },
			{{-1, ERROR, 16}, {39, SHIFT, 39}, {41, SHIFT, 40}, },
			{{-1, ERROR, 17}, {9, SHIFT, 43}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 48}, },
			{{-1, ERROR, 18}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 61}, },
			{{-1, ERROR, 19}, {9, SHIFT, 43}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 48}, },
			{{-1, REDUCE, 53}, {33, SHIFT, 64}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 28}, {40, SHIFT, 65}, },
			{{-1, ERROR, 29}, {35, SHIFT, 66}, {42, SHIFT, 67}, },
			{{-1, ERROR, 30}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {37, SHIFT, 7}, {38, SHIFT, 68}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 34}, {17, SHIFT, 70}, },
			{{-1, ERROR, 35}, {39, SHIFT, 71}, {41, SHIFT, 72}, },
			{{-1, ERROR, 36}, {41, SHIFT, 75}, },
			{{-1, ERROR, 37}, {34, SHIFT, 76}, },
			{{-1, REDUCE, 5}, {40, SHIFT, 77}, },
			{{-1, ERROR, 39}, {17, SHIFT, 80}, },
			{{-1, ERROR, 40}, {1, SHIFT, 81}, {7, SHIFT, 82}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 42}, {39, SHIFT, 39}, {41, SHIFT, 85}, },
			{{-1, ERROR, 43}, {9, SHIFT, 43}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 48}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 48}, {9, SHIFT, 43}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 48}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 74}, {35, SHIFT, 66}, },
			{{-1, ERROR, 51}, {22, SHIFT, 91}, {23, SHIFT, 92}, {26, SHIFT, 93}, {27, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, {30, SHIFT, 97}, {31, SHIFT, 98}, {32, SHIFT, 99}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 53}, {17, SHIFT, 20}, {18, SHIFT, 102}, {19, SHIFT, 103}, {21, SHIFT, 21}, {33, SHIFT, 61}, },
			{{-1, REDUCE, 59}, {2, SHIFT, 107}, {8, SHIFT, 108}, {24, SHIFT, 109}, {25, SHIFT, 110}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 57}, {0, SHIFT, 111}, {11, SHIFT, 112}, {14, SHIFT, 113}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 61}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 61}, },
			{{-1, ERROR, 62}, {22, SHIFT, 91}, {23, SHIFT, 92}, {40, SHIFT, 115}, },
			{{-1, ERROR, 63}, {0, SHIFT, 111}, {3, SHIFT, 116}, {11, SHIFT, 112}, },
			{{-1, ERROR, 64}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 61}, {34, SHIFT, 117}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 66}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 61}, },
			{{-1, ERROR, 67}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 61}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 70}, {39, SHIFT, 71}, {41, SHIFT, 122}, },
			{{-1, ERROR, 71}, {17, SHIFT, 124}, },
			{{-1, ERROR, 72}, {1, SHIFT, 81}, {7, SHIFT, 82}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 74}, {39, SHIFT, 71}, {41, SHIFT, 127}, },
			{{-1, ERROR, 75}, {1, SHIFT, 81}, {7, SHIFT, 82}, {10, SHIFT, 129}, },
			{{-1, ERROR, 76}, {41, SHIFT, 132}, },
			{{-1, ERROR, 77}, {12, SHIFT, 34}, {17, SHIFT, 35}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 6}, {40, SHIFT, 77}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, {35, SHIFT, 135}, },
			{{-1, ERROR, 84}, {40, SHIFT, 138}, },
			{{-1, ERROR, 85}, {1, SHIFT, 81}, {7, SHIFT, 82}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 89}, {22, SHIFT, 91}, {23, SHIFT, 92}, {26, SHIFT, 93}, {27, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, {30, SHIFT, 97}, {31, SHIFT, 98}, {32, SHIFT, 99}, {34, SHIFT, 140}, },
			{{-1, ERROR, 90}, {0, SHIFT, 111}, {11, SHIFT, 112}, {34, SHIFT, 141}, },
			{{-1, ERROR, 91}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {33, SHIFT, 61}, },
			{{-1, ERROR, 92}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {33, SHIFT, 61}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 101}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 61}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 62}, {35, SHIFT, 66}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 107}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {33, SHIFT, 61}, },
			{{-1, ERROR, 108}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {33, SHIFT, 61}, },
			{{-1, ERROR, 109}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {33, SHIFT, 61}, },
			{{-1, ERROR, 110}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {33, SHIFT, 61}, },
			{{-1, ERROR, 111}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 48}, },
			{{-1, ERROR, 112}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 48}, },
			{{-1, ERROR, 113}, {6, SHIFT, 151}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {37, SHIFT, 7}, {40, SHIFT, 23}, },
			{{-1, ERROR, 114}, {22, SHIFT, 91}, {23, SHIFT, 92}, {34, SHIFT, 140}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 116}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {37, SHIFT, 7}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 118}, {34, SHIFT, 156}, },
			{{-1, REDUCE, 50}, {22, SHIFT, 91}, {23, SHIFT, 92}, {39, SHIFT, 157}, },
			{{-1, ERROR, 120}, {22, SHIFT, 91}, {23, SHIFT, 92}, {36, SHIFT, 160}, },
			{{-1, ERROR, 121}, {22, SHIFT, 91}, {23, SHIFT, 92}, {40, SHIFT, 161}, },
			{{-1, ERROR, 122}, {1, SHIFT, 81}, {7, SHIFT, 82}, },
			{{-1, ERROR, 123}, {39, SHIFT, 71}, {41, SHIFT, 163}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 20}, {35, SHIFT, 164}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 127}, {1, SHIFT, 81}, {7, SHIFT, 82}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 132}, {1, SHIFT, 81}, {7, SHIFT, 82}, {10, SHIFT, 129}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 135}, {18, SHIFT, 170}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 16}, {35, SHIFT, 135}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 139}, {40, SHIFT, 172}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 57}, {2, SHIFT, 107}, {8, SHIFT, 108}, {24, SHIFT, 109}, {25, SHIFT, 110}, },
			{{-1, REDUCE, 58}, {2, SHIFT, 107}, {8, SHIFT, 108}, {24, SHIFT, 109}, {25, SHIFT, 110}, },
			{{-1, REDUCE, 87}, {22, SHIFT, 91}, {23, SHIFT, 92}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 151}, {9, SHIFT, 43}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 48}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 153}, {4, SHIFT, 174}, },
			{{-1, REDUCE, 33}, {4, REDUCE, 39}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 157}, {17, SHIFT, 20}, {18, SHIFT, 44}, {19, SHIFT, 45}, {21, SHIFT, 21}, {22, SHIFT, 46}, {23, SHIFT, 47}, {33, SHIFT, 61}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 51}, {39, SHIFT, 157}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 163}, {1, SHIFT, 81}, {7, SHIFT, 82}, },
			{{-1, ERROR, 164}, {18, SHIFT, 178}, {36, SHIFT, 179}, },
			{{-1, REDUCE, 21}, {35, SHIFT, 180}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 22}, {35, SHIFT, 180}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 170}, {36, SHIFT, 183}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 173}, {0, SHIFT, 111}, {11, SHIFT, 112}, {14, SHIFT, 184}, },
			{{-1, ERROR, 174}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {37, SHIFT, 7}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 52}, {22, SHIFT, 91}, {23, SHIFT, 92}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 178}, {36, SHIFT, 186}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 180}, {18, SHIFT, 178}, },
			{{-1, REDUCE, 23}, {35, SHIFT, 180}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 184}, {6, SHIFT, 151}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {37, SHIFT, 7}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 187}, {4, SHIFT, 188}, },
			{{-1, ERROR, 188}, {6, SHIFT, 151}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {37, SHIFT, 7}, {40, SHIFT, 23}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 40}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 9}, {0, 4}, },
			{{-1, 37}, },
			{{-1, 78}, {79, 134}, },
			{{-1, 38}, {77, 133}, },
			{{-1, 73}, {74, 128}, {123, 128}, },
			{{-1, 125}, {40, 83}, {75, 130}, {85, 83}, {132, 130}, },
			{{-1, 84}, {85, 139}, },
			{{-1, 136}, {137, 171}, },
			{{-1, 131}, {132, 169}, },
			{{-1, 126}, {122, 162}, {127, 168}, {163, 177}, },
			{{-1, 165}, },
			{{-1, 166}, {167, 182}, {181, 182}, },
			{{-1, 10}, {14, 32}, },
			{{-1, 11}, },
			{{-1, 41}, {42, 86}, },
			{{-1, 12}, },
			{{-1, 152}, {7, 24}, {30, 69}, {116, 155}, {174, 185}, {188, 185}, },
			{{-1, 25}, },
			{{-1, 153}, {184, 187}, {188, 190}, },
			{{-1, 189}, },
			{{-1, 26}, {113, 154}, {184, 154}, {188, 154}, },
			{{-1, 27}, {4, 13}, {9, 13}, {14, 33}, },
			{{-1, 49}, {7, 28}, {30, 28}, {53, 104}, {113, 28}, {116, 28}, {174, 28}, {184, 28}, {188, 28}, },
			{{-1, 118}, },
			{{-1, 158}, {159, 176}, },
			{{-1, 50}, {7, 29}, {30, 29}, {53, 105}, {113, 29}, {116, 29}, {174, 29}, {184, 29}, {188, 29}, },
			{{-1, 51}, {18, 62}, {48, 89}, {61, 114}, {64, 119}, {66, 120}, {67, 121}, {101, 144}, {157, 175}, },
			{{-1, 52}, },
			{{-1, 53}, },
			{{-1, 54}, {91, 142}, {92, 143}, },
			{{-1, 55}, {107, 145}, {108, 146}, {109, 147}, {110, 148}, },
			{{-1, 56}, {53, 106}, },
			{{-1, 57}, {19, 63}, {48, 90}, {151, 173}, },
			{{-1, 58}, {43, 87}, },
			{{-1, 59}, {43, 88}, {111, 149}, {112, 150}, },
			{{-1, 60}, },
			{{-1, 100}, },
			{{-1, 101}, },
			{{-1, 14}, },
			{{-1, 79}, },
			{{-1, 74}, {70, 123}, },
			{{-1, 137}, },
			{{-1, 167}, {165, 181}, },
			{{-1, 42}, },
			{{-1, 30}, },
			{{-1, 159}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'fun', 'var', '{'",
			"expecting: '('",
			"expecting: 'if', 'return', 'while', id, string literal, '{', '}', ';'",
			"expecting: 'fun', 'var', '{', ';'",
			"expecting: 'fun', 'var', '{', EOF",
			"expecting: 'ref', id, ')'",
			"expecting: ',', ':'",
			"expecting: 'not', id, int const, char const, string literal, '+', '-', '('",
			"expecting: id, int const, char const, string literal, '+', '-', '('",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '+', '-', '*', '/', '#', '=', '<', '>', '<=', '>=', '<>', '(', ')', '[', ']', ',', ';', '<-'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '+', '-', '*', '/', '#', '=', '<', '>', '<=', '>=', '<>', ')', '[', ']', ',', ';', '<-'",
			"expecting: 'else', 'fun', 'if', 'return', 'var', 'while', id, string literal, '{', '}', ';', EOF",
			"expecting: 'else', 'if', 'return', 'while', id, string literal, '{', '}', ';'",
			"expecting: ';'",
			"expecting: '[', '<-'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: 'char', 'int'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '+', '-', '*', '/', '#', '=', '<', '>', '<=', '>=', '<>', ')', ']', ',', ';'",
			"expecting: id, int const, char const, string literal, '('",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '+', '-', '*', '/', '#', '=', '<', '>', '<=', '>=', '<>', ')', '[', ']', ',', ';'",
			"expecting: '+', '-', '#', '=', '<', '>', '<=', '>=', '<>'",
			"expecting: 'and', 'do', 'or', 'then', '+', '-', '#', '=', '<', '>', '<=', '>=', '<>', ')', ']', ',', ';'",
			"expecting: 'and', 'or', 'then'",
			"expecting: 'and', 'do', 'or', 'then', ')'",
			"expecting: '+', '-', ';'",
			"expecting: 'and', 'do', 'or'",
			"expecting: id, int const, char const, string literal, '+', '-', '(', ')'",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: 'ref', id",
			"expecting: 'fun', 'var', ')', '[', '{', ';'",
			"expecting: '[', ';'",
			"expecting: '+', '-', '#', '=', '<', '>', '<=', '>=', '<>', ')'",
			"expecting: 'and', 'or', ')'",
			"expecting: 'and', 'do', 'or', 'then', '+', '-', '#', '=', '<', '>', '<=', '>=', '<>', ')', '[', ']', ',', ';'",
			"expecting: 'if', 'return', 'while', id, string literal, '{', ';'",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ')', ','",
			"expecting: '+', '-', ']'",
			"expecting: ')', '[', ';'",
			"expecting: int const",
			"expecting: 'and', 'do', 'or', 'then', '+', '-', ')'",
			"expecting: 'else'",
			"expecting: ')', ','",
			"expecting: int const, ']'",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 5, 3, 6, 3, 3, 3, 7, 3, 8, 9, 10, 11, 10, 12, 13, 14, 15, 5, 5, 5, 15, 16, 17, 5, 3, 3, 7, 1, 9, 18, 19, 20, 1, 21, 9, 9, 10, 22, 22, 23, 23, 10, 22, 24, 25, 26, 23, 22, 22, 22, 27, 28, 28, 28, 11, 29, 30, 31, 15, 11, 11, 14, 5, 9, 1, 21, 9, 9, 32, 18, 33, 20, 20, 9, 34, 34, 35, 16, 21, 9, 28, 28, 36, 37, 23, 23, 11, 11, 11, 11, 11, 11, 11, 28, 11, 26, 26, 26, 38, 26, 23, 23, 23, 23, 11, 11, 39, 40, 15, 39, 22, 19, 41, 42, 29, 21, 9, 9, 43, 20, 21, 9, 6, 6, 6, 32, 20, 20, 44, 35, 35, 3, 16, 22, 28, 22, 22, 45, 22, 22, 22, 22, 28, 28, 10, 5, 46, 15, 5, 22, 11, 47, 47, 13, 15, 20, 21, 48, 43, 43, 43, 20, 6, 49, 35, 3, 27, 39, 41, 47, 20, 49, 43, 44, 43, 43, 35, 39, 5, 43, 46, 39, 46, 46, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

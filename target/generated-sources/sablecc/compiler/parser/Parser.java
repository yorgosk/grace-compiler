/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAfuncdef1FuncDef */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AAfuncdef2FuncDef */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AAheader1Header */
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AAheader2Header */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce AAheaderparams1HeaderParams */
		    {
			ArrayList list = new5();
			push(goTo(3), list);
		    }
		    break;
                    case 6: /* reduce AAheaderparams2HeaderParams */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce AHeaderNextArg */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce AAfpardef1FparDef */
		    {
			ArrayList list = new8();
			push(goTo(5), list);
		    }
		    break;
                    case 9: /* reduce AAfpardef2FparDef */
		    {
			ArrayList list = new9();
			push(goTo(5), list);
		    }
		    break;
                    case 10: /* reduce AAfpardef3FparDef */
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce AAfpardef4FparDef */
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;
                    case 12: /* reduce AFparDefNextId */
		    {
			ArrayList list = new12();
			push(goTo(6), list);
		    }
		    break;
                    case 13: /* reduce AIntDataType */
		    {
			ArrayList list = new13();
			push(goTo(7), list);
		    }
		    break;
                    case 14: /* reduce ACharDataType */
		    {
			ArrayList list = new14();
			push(goTo(7), list);
		    }
		    break;
                    case 15: /* reduce AAtype1Type */
		    {
			ArrayList list = new15();
			push(goTo(8), list);
		    }
		    break;
                    case 16: /* reduce AAtype2Type */
		    {
			ArrayList list = new16();
			push(goTo(8), list);
		    }
		    break;
                    case 17: /* reduce ADimension */
		    {
			ArrayList list = new17();
			push(goTo(9), list);
		    }
		    break;
                    case 18: /* reduce ADataTypeRetType */
		    {
			ArrayList list = new18();
			push(goTo(10), list);
		    }
		    break;
                    case 19: /* reduce ANothingRetType */
		    {
			ArrayList list = new19();
			push(goTo(10), list);
		    }
		    break;
                    case 20: /* reduce AAfpartype1FparType */
		    {
			ArrayList list = new20();
			push(goTo(11), list);
		    }
		    break;
                    case 21: /* reduce AAfpartype2FparType */
		    {
			ArrayList list = new21();
			push(goTo(11), list);
		    }
		    break;
                    case 22: /* reduce AAfpartype3FparType */
		    {
			ArrayList list = new22();
			push(goTo(11), list);
		    }
		    break;
                    case 23: /* reduce AAfpartype4FparType */
		    {
			ArrayList list = new23();
			push(goTo(11), list);
		    }
		    break;
                    case 24: /* reduce ALRBrackets */
		    {
			ArrayList list = new24();
			push(goTo(12), list);
		    }
		    break;
                    case 25: /* reduce ANextDimension */
		    {
			ArrayList list = new25();
			push(goTo(13), list);
		    }
		    break;
                    case 26: /* reduce AFuncDefLocalDef */
		    {
			ArrayList list = new26();
			push(goTo(14), list);
		    }
		    break;
                    case 27: /* reduce AFuncDeclLocalDef */
		    {
			ArrayList list = new27();
			push(goTo(14), list);
		    }
		    break;
                    case 28: /* reduce AVarDefLocalDef */
		    {
			ArrayList list = new28();
			push(goTo(14), list);
		    }
		    break;
                    case 29: /* reduce AAvardef1VarDef */
		    {
			ArrayList list = new29();
			push(goTo(15), list);
		    }
		    break;
                    case 30: /* reduce AAvardef2VarDef */
		    {
			ArrayList list = new30();
			push(goTo(15), list);
		    }
		    break;
                    case 31: /* reduce AVarDefNextId */
		    {
			ArrayList list = new31();
			push(goTo(16), list);
		    }
		    break;
                    case 32: /* reduce AFuncDecl */
		    {
			ArrayList list = new32();
			push(goTo(17), list);
		    }
		    break;
                    case 33: /* reduce AMatchedStmt */
		    {
			ArrayList list = new33();
			push(goTo(18), list);
		    }
		    break;
                    case 34: /* reduce AUnmatchedStmt */
		    {
			ArrayList list = new34();
			push(goTo(18), list);
		    }
		    break;
                    case 35: /* reduce AIfMatchedElseMatchedMatched */
		    {
			ArrayList list = new35();
			push(goTo(19), list);
		    }
		    break;
                    case 36: /* reduce AWhileMatchedMatched */
		    {
			ArrayList list = new36();
			push(goTo(19), list);
		    }
		    break;
                    case 37: /* reduce AOtherMatched */
		    {
			ArrayList list = new37();
			push(goTo(19), list);
		    }
		    break;
                    case 38: /* reduce AIfUnmatched */
		    {
			ArrayList list = new38();
			push(goTo(20), list);
		    }
		    break;
                    case 39: /* reduce AWhileUnmatchedUnmatched */
		    {
			ArrayList list = new39();
			push(goTo(20), list);
		    }
		    break;
                    case 40: /* reduce AIfMatchedElseUnmatchedUnmatched */
		    {
			ArrayList list = new40();
			push(goTo(20), list);
		    }
		    break;
                    case 41: /* reduce ASemicolonOtherStmt */
		    {
			ArrayList list = new41();
			push(goTo(21), list);
		    }
		    break;
                    case 42: /* reduce AAssignmentOtherStmt */
		    {
			ArrayList list = new42();
			push(goTo(21), list);
		    }
		    break;
                    case 43: /* reduce ABlockOtherStmt */
		    {
			ArrayList list = new43();
			push(goTo(21), list);
		    }
		    break;
                    case 44: /* reduce AFunctionOtherStmt */
		    {
			ArrayList list = new44();
			push(goTo(21), list);
		    }
		    break;
                    case 45: /* reduce AAreturnexprotherstmt1OtherStmt */
		    {
			ArrayList list = new45();
			push(goTo(21), list);
		    }
		    break;
                    case 46: /* reduce AAreturnexprotherstmt2OtherStmt */
		    {
			ArrayList list = new46();
			push(goTo(21), list);
		    }
		    break;
                    case 47: /* reduce AAblock1Block */
		    {
			ArrayList list = new47();
			push(goTo(22), list);
		    }
		    break;
                    case 48: /* reduce AAblock2Block */
		    {
			ArrayList list = new48();
			push(goTo(22), list);
		    }
		    break;
                    case 49: /* reduce AAfunccall1FuncCall */
		    {
			ArrayList list = new49();
			push(goTo(23), list);
		    }
		    break;
                    case 50: /* reduce AAfunccall2FuncCall */
		    {
			ArrayList list = new50();
			push(goTo(23), list);
		    }
		    break;
                    case 51: /* reduce AAfuncargs1FuncArgs */
		    {
			ArrayList list = new51();
			push(goTo(24), list);
		    }
		    break;
                    case 52: /* reduce AAfuncargs2FuncArgs */
		    {
			ArrayList list = new52();
			push(goTo(24), list);
		    }
		    break;
                    case 53: /* reduce AFuncCallNextArg */
		    {
			ArrayList list = new53();
			push(goTo(25), list);
		    }
		    break;
                    case 54: /* reduce AIdLValue */
		    {
			ArrayList list = new54();
			push(goTo(26), list);
		    }
		    break;
                    case 55: /* reduce AStringLValue */
		    {
			ArrayList list = new55();
			push(goTo(26), list);
		    }
		    break;
                    case 56: /* reduce AExpressionLValue */
		    {
			ArrayList list = new56();
			push(goTo(26), list);
		    }
		    break;
                    case 57: /* reduce AExprPlusTermExpr */
		    {
			ArrayList list = new57();
			push(goTo(27), list);
		    }
		    break;
                    case 58: /* reduce AExprMinusTermExpr */
		    {
			ArrayList list = new58();
			push(goTo(27), list);
		    }
		    break;
                    case 59: /* reduce ATermExpr */
		    {
			ArrayList list = new59();
			push(goTo(27), list);
		    }
		    break;
                    case 60: /* reduce ATermMultFactor$IntConst1Term */
		    {
			ArrayList list = new60();
			push(goTo(28), list);
		    }
		    break;
                    case 61: /* reduce ATermMultFactor$CharConst1Term */
		    {
			ArrayList list = new61();
			push(goTo(28), list);
		    }
		    break;
                    case 62: /* reduce ATermMultFactor$LValue1Term */
		    {
			ArrayList list = new62();
			push(goTo(28), list);
		    }
		    break;
                    case 63: /* reduce ATermMultFactor$FuncCall1Term */
		    {
			ArrayList list = new63();
			push(goTo(28), list);
		    }
		    break;
                    case 64: /* reduce ATermMultFactor$ExprInPars1Term */
		    {
			ArrayList list = new64();
			push(goTo(28), list);
		    }
		    break;
                    case 65: /* reduce ATermMultFactor$SignedExpr1Term */
		    {
			ArrayList list = new65();
			push(goTo(28), list);
		    }
		    break;
                    case 66: /* reduce ATermDivFactor$IntConst1Term */
		    {
			ArrayList list = new66();
			push(goTo(28), list);
		    }
		    break;
                    case 67: /* reduce ATermDivFactor$CharConst1Term */
		    {
			ArrayList list = new67();
			push(goTo(28), list);
		    }
		    break;
                    case 68: /* reduce ATermDivFactor$LValue1Term */
		    {
			ArrayList list = new68();
			push(goTo(28), list);
		    }
		    break;
                    case 69: /* reduce ATermDivFactor$FuncCall1Term */
		    {
			ArrayList list = new69();
			push(goTo(28), list);
		    }
		    break;
                    case 70: /* reduce ATermDivFactor$ExprInPars1Term */
		    {
			ArrayList list = new70();
			push(goTo(28), list);
		    }
		    break;
                    case 71: /* reduce ATermDivFactor$SignedExpr1Term */
		    {
			ArrayList list = new71();
			push(goTo(28), list);
		    }
		    break;
                    case 72: /* reduce ATermDivisionFactor$IntConst1Term */
		    {
			ArrayList list = new72();
			push(goTo(28), list);
		    }
		    break;
                    case 73: /* reduce ATermDivisionFactor$CharConst1Term */
		    {
			ArrayList list = new73();
			push(goTo(28), list);
		    }
		    break;
                    case 74: /* reduce ATermDivisionFactor$LValue1Term */
		    {
			ArrayList list = new74();
			push(goTo(28), list);
		    }
		    break;
                    case 75: /* reduce ATermDivisionFactor$FuncCall1Term */
		    {
			ArrayList list = new75();
			push(goTo(28), list);
		    }
		    break;
                    case 76: /* reduce ATermDivisionFactor$ExprInPars1Term */
		    {
			ArrayList list = new76();
			push(goTo(28), list);
		    }
		    break;
                    case 77: /* reduce ATermDivisionFactor$SignedExpr1Term */
		    {
			ArrayList list = new77();
			push(goTo(28), list);
		    }
		    break;
                    case 78: /* reduce ATermModFactor$IntConst1Term */
		    {
			ArrayList list = new78();
			push(goTo(28), list);
		    }
		    break;
                    case 79: /* reduce ATermModFactor$CharConst1Term */
		    {
			ArrayList list = new79();
			push(goTo(28), list);
		    }
		    break;
                    case 80: /* reduce ATermModFactor$LValue1Term */
		    {
			ArrayList list = new80();
			push(goTo(28), list);
		    }
		    break;
                    case 81: /* reduce ATermModFactor$FuncCall1Term */
		    {
			ArrayList list = new81();
			push(goTo(28), list);
		    }
		    break;
                    case 82: /* reduce ATermModFactor$ExprInPars1Term */
		    {
			ArrayList list = new82();
			push(goTo(28), list);
		    }
		    break;
                    case 83: /* reduce ATermModFactor$SignedExpr1Term */
		    {
			ArrayList list = new83();
			push(goTo(28), list);
		    }
		    break;
                    case 84: /* reduce AFactor$IntConst1Term */
		    {
			ArrayList list = new84();
			push(goTo(28), list);
		    }
		    break;
                    case 85: /* reduce AFactor$CharConst1Term */
		    {
			ArrayList list = new85();
			push(goTo(28), list);
		    }
		    break;
                    case 86: /* reduce AFactor$LValue1Term */
		    {
			ArrayList list = new86();
			push(goTo(28), list);
		    }
		    break;
                    case 87: /* reduce AFactor$FuncCall1Term */
		    {
			ArrayList list = new87();
			push(goTo(28), list);
		    }
		    break;
                    case 88: /* reduce AFactor$ExprInPars1Term */
		    {
			ArrayList list = new88();
			push(goTo(28), list);
		    }
		    break;
                    case 89: /* reduce AFactor$SignedExpr1Term */
		    {
			ArrayList list = new89();
			push(goTo(28), list);
		    }
		    break;
                    case 90: /* reduce AExprInPars */
		    {
			ArrayList list = new90();
			push(goTo(29), list);
		    }
		    break;
                    case 91: /* reduce ASignFactor$IntConst1SignedExpr */
		    {
			ArrayList list = new91();
			push(goTo(30), list);
		    }
		    break;
                    case 92: /* reduce ASignFactor$CharConst1SignedExpr */
		    {
			ArrayList list = new92();
			push(goTo(30), list);
		    }
		    break;
                    case 93: /* reduce ASignFactor$LValue1SignedExpr */
		    {
			ArrayList list = new93();
			push(goTo(30), list);
		    }
		    break;
                    case 94: /* reduce ASignFactor$FuncCall1SignedExpr */
		    {
			ArrayList list = new94();
			push(goTo(30), list);
		    }
		    break;
                    case 95: /* reduce ASignFactor$ExprInPars1SignedExpr */
		    {
			ArrayList list = new95();
			push(goTo(30), list);
		    }
		    break;
                    case 96: /* reduce ASignFactor$SignedExpr1SignedExpr */
		    {
			ArrayList list = new96();
			push(goTo(30), list);
		    }
		    break;
                    case 97: /* reduce APlusSignSign */
		    {
			ArrayList list = new97();
			push(goTo(31), list);
		    }
		    break;
                    case 98: /* reduce AMinusSignSign */
		    {
			ArrayList list = new98();
			push(goTo(31), list);
		    }
		    break;
                    case 99: /* reduce ANotCond */
		    {
			ArrayList list = new99();
			push(goTo(32), list);
		    }
		    break;
                    case 100: /* reduce ACondAndTermcondCond */
		    {
			ArrayList list = new100();
			push(goTo(32), list);
		    }
		    break;
                    case 101: /* reduce ACondOrTermcondCond */
		    {
			ArrayList list = new101();
			push(goTo(32), list);
		    }
		    break;
                    case 102: /* reduce ATermcondCond */
		    {
			ArrayList list = new102();
			push(goTo(32), list);
		    }
		    break;
                    case 103: /* reduce ANotNotCondNotCond */
		    {
			ArrayList list = new103();
			push(goTo(33), list);
		    }
		    break;
                    case 104: /* reduce ANotTermcondNotCond */
		    {
			ArrayList list = new104();
			push(goTo(33), list);
		    }
		    break;
                    case 105: /* reduce ACondInParsTermcond */
		    {
			ArrayList list = new105();
			push(goTo(34), list);
		    }
		    break;
                    case 106: /* reduce AExprNumopExprTermcond */
		    {
			ArrayList list = new106();
			push(goTo(34), list);
		    }
		    break;
                    case 107: /* reduce ACondInPars */
		    {
			ArrayList list = new107();
			push(goTo(35), list);
		    }
		    break;
                    case 108: /* reduce ANumopExpr */
		    {
			ArrayList list = new108();
			push(goTo(36), list);
		    }
		    break;
                    case 109: /* reduce AEqualNumop */
		    {
			ArrayList list = new109();
			push(goTo(37), list);
		    }
		    break;
                    case 110: /* reduce AHashtagNumop */
		    {
			ArrayList list = new110();
			push(goTo(37), list);
		    }
		    break;
                    case 111: /* reduce AUnequalNumop */
		    {
			ArrayList list = new111();
			push(goTo(37), list);
		    }
		    break;
                    case 112: /* reduce ALesserNumop */
		    {
			ArrayList list = new112();
			push(goTo(37), list);
		    }
		    break;
                    case 113: /* reduce AGreaterNumop */
		    {
			ArrayList list = new113();
			push(goTo(37), list);
		    }
		    break;
                    case 114: /* reduce ALesseqNumop */
		    {
			ArrayList list = new114();
			push(goTo(37), list);
		    }
		    break;
                    case 115: /* reduce AGreateqNumop */
		    {
			ArrayList list = new115();
			push(goTo(37), list);
		    }
		    break;
                    case 116: /* reduce ATerminal$LocalDef */
		    {
			ArrayList list = new116();
			push(goTo(38), list);
		    }
		    break;
                    case 117: /* reduce ANonTerminal$LocalDef */
		    {
			ArrayList list = new117();
			push(goTo(38), list);
		    }
		    break;
                    case 118: /* reduce ATerminal$HeaderNextArg */
		    {
			ArrayList list = new118();
			push(goTo(39), list);
		    }
		    break;
                    case 119: /* reduce ANonTerminal$HeaderNextArg */
		    {
			ArrayList list = new119();
			push(goTo(39), list);
		    }
		    break;
                    case 120: /* reduce ATerminal$FparDefNextId */
		    {
			ArrayList list = new120();
			push(goTo(40), list);
		    }
		    break;
                    case 121: /* reduce ANonTerminal$FparDefNextId */
		    {
			ArrayList list = new121();
			push(goTo(40), list);
		    }
		    break;
                    case 122: /* reduce ATerminal$Dimension */
		    {
			ArrayList list = new122();
			push(goTo(41), list);
		    }
		    break;
                    case 123: /* reduce ANonTerminal$Dimension */
		    {
			ArrayList list = new123();
			push(goTo(41), list);
		    }
		    break;
                    case 124: /* reduce ATerminal$NextDimension */
		    {
			ArrayList list = new124();
			push(goTo(42), list);
		    }
		    break;
                    case 125: /* reduce ANonTerminal$NextDimension */
		    {
			ArrayList list = new125();
			push(goTo(42), list);
		    }
		    break;
                    case 126: /* reduce ATerminal$VarDefNextId */
		    {
			ArrayList list = new126();
			push(goTo(43), list);
		    }
		    break;
                    case 127: /* reduce ANonTerminal$VarDefNextId */
		    {
			ArrayList list = new127();
			push(goTo(43), list);
		    }
		    break;
                    case 128: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new128();
			push(goTo(44), list);
		    }
		    break;
                    case 129: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new129();
			push(goTo(44), list);
		    }
		    break;
                    case 130: /* reduce ATerminal$FuncCallNextArg */
		    {
			ArrayList list = new130();
			push(goTo(45), list);
		    }
		    break;
                    case 131: /* reduce ANonTerminal$FuncCallNextArg */
		    {
			ArrayList list = new131();
			push(goTo(45), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfuncdefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAfuncdef1FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode3 = new LinkedList();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAfuncdef2FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode4 = new LinkedList();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        PRetType prettypeNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        prettypeNode4 = (PRetType)nodeArrayList6.get(0);

        pheaderNode1 = new AHeader(tidNode2, listNode3, prettypeNode4);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PRetType prettypeNode5;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        prettypeNode5 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader(tidNode2, listNode4, prettypeNode5);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAheaderparams1HeaderParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFparDef pfpardefNode1;
        pfpardefNode1 = (PFparDef)nodeArrayList1.get(0);
	if(pfpardefNode1 != null)
	{
	  listNode2.add(pfpardefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAheaderparams2HeaderParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PFparDef pfpardefNode1;
        LinkedList listNode2 = new LinkedList();
        pfpardefNode1 = (PFparDef)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pfpardefNode1 != null)
	{
	  listNode3.add(pfpardefNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AHeaderNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        pfpardefNode1 = (PFparDef)nodeArrayList2.get(0);
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        PFparType pfpartypeNode5;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        pfpartypeNode5 = (PFparType)nodeArrayList3.get(0);

        pfpardefNode1 = new AFparDef(null, tidNode3, listNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        PFparType pfpartypeNode5;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        pfpartypeNode5 = (PFparType)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef(trefNode2, tidNode3, listNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAfpardef3FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        PFparType pfpartypeNode6;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pfpartypeNode6 = (PFparType)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef(null, tidNode3, listNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAfpardef4FparDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        PFparType pfpartypeNode6;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pfpartypeNode6 = (PFparType)nodeArrayList5.get(0);

        pfpardefNode1 = new AFparDef(trefNode2, tidNode3, listNode5, pfpartypeNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AFparDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList2.get(0);
	nodeList.add(tidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntDataType(tintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ACharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharDataType(tcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode3 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new AType(pdatatypeNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ADimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TIntConst tintconstNode1;
        tintconstNode1 = (TIntConst)nodeArrayList2.get(0);
	nodeList.add(tintconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ADataTypeRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ADataTypeRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce ANothingRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ANothingRetType(tnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAfpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, null, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAfpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PLRBrackets plrbracketsNode3;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        plrbracketsNode3 = (PLRBrackets)nodeArrayList2.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, plrbracketsNode3, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAfpartype3FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, null, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAfpartype4FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PLRBrackets plrbracketsNode3;
        LinkedList listNode5 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        plrbracketsNode3 = (PLRBrackets)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pdatatypeNode2, plrbracketsNode3, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ALRBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLRBrackets plrbracketsNode1;
        {
            // Block
        TLBracket tlbracketNode2;
        TRBracket trbracketNode3;
        tlbracketNode2 = (TLBracket)nodeArrayList1.get(0);
        trbracketNode3 = (TRBracket)nodeArrayList2.get(0);

        plrbracketsNode1 = new ALRBrackets(tlbracketNode2, trbracketNode3);
        }
	nodeList.add(plrbracketsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ANextDimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TIntConst tintconstNode1;
        tintconstNode1 = (TIntConst)nodeArrayList2.get(0);
	nodeList.add(tintconstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AFuncDefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDefLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AFuncDeclLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDeclLocalDef(pfuncdeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AVarDefLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVarDefLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAvardef1VarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        PType ptypeNode4;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        ptypeNode4 = (PType)nodeArrayList4.get(0);

        pvardefNode1 = new AVarDef(tidNode2, listNode3, ptypeNode4);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAvardef2VarDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        PType ptypeNode5;
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        ptypeNode5 = (PType)nodeArrayList5.get(0);

        pvardefNode1 = new AVarDef(tidNode2, listNode4, ptypeNode5);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AVarDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList2.get(0);
	nodeList.add(tidNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        PHeader pheaderNode2;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);

        pfuncdeclNode1 = new AFuncDecl(pheaderNode2);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AMatchedStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AUnmatchedStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AIfMatchedElseMatchedMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        LinkedList listNode5 = new LinkedList();
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);
        {
            // Block
        PStmt pstmtNode4;
        pstmtNode4 = (PStmt)nodeArrayList6.get(0);
	if(pstmtNode4 != null)
	{
	  listNode5.add(pstmtNode4);
	}
        }

        pstmtNode1 = new AIfStmt(pcondNode2, pstmtNode3, listNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AWhileMatchedMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AWhileStmt(pcondNode2, pstmtNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AOtherMatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AIfUnmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        LinkedList listNode4 = new LinkedList();
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);
        {
            // Block
        }

        pstmtNode1 = new AIfStmt(pcondNode2, pstmtNode3, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AWhileUnmatchedUnmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AWhileStmt(pcondNode2, pstmtNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AIfMatchedElseUnmatchedUnmatched */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PCond pcondNode2;
        PStmt pstmtNode3;
        LinkedList listNode5 = new LinkedList();
        pcondNode2 = (PCond)nodeArrayList2.get(0);
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);
        {
            // Block
        PStmt pstmtNode4;
        pstmtNode4 = (PStmt)nodeArrayList6.get(0);
	if(pstmtNode4 != null)
	{
	  listNode5.add(pstmtNode4);
	}
        }

        pstmtNode1 = new AIfStmt(pcondNode2, pstmtNode3, listNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ASemicolonOtherStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new ASemicolonStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAssignmentOtherStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLValue plvalueNode2;
        PExpr pexprNode3;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pstmtNode1 = new AAssignmentStmt(plvalueNode2, pexprNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ABlockOtherStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtNode1 = new ABlockStmt(pblockNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AFunctionOtherStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pstmtNode1 = new AFunctionStmt(pfunccallNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AAreturnexprotherstmt1OtherStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pstmtNode1 = new AReturnStmt(listNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AAreturnexprotherstmt2OtherStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }

        pstmtNode1 = new AReturnStmt(listNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pblockNode1 = new ABlock(listNode2);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pblockNode1 = new ABlock(listNode3);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AAfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode3 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }

        pfunccallNode1 = new AFuncCall(tidNode2, listNode3);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AAfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfunccallNode1 = new AFuncCall(tidNode2, listNode4);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAfuncargs1FuncArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AAfuncargs2FuncArgs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        LinkedList listNode2 = new LinkedList();
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AFuncCallNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AIdLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plvalueNode1 = new AIdLValue(tidNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AStringLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        plvalueNode1 = new AStringLValue(tstringliteralNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AExpressionLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        PExpr pexprNode3;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        plvalueNode1 = new AExpressionLValue(plvalueNode2, pexprNode3);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AExprPlusTermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AExprMinusTermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce ATermMultFactor$IntConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        TIntConst tintconstNode4;
        tintconstNode4 = (TIntConst)nodeArrayList3.get(0);

        pexprNode3 = new AIntConstExpr(tintconstNode4);
        }

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce ATermMultFactor$CharConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        TCharConst tcharconstNode4;
        tcharconstNode4 = (TCharConst)nodeArrayList3.get(0);

        pexprNode3 = new ACharConstExpr(tcharconstNode4);
        }

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce ATermMultFactor$LValue1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        PLValue plvalueNode4;
        plvalueNode4 = (PLValue)nodeArrayList3.get(0);

        pexprNode3 = new ALValueExpr(plvalueNode4);
        }

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ATermMultFactor$FuncCall1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        PFuncCall pfunccallNode4;
        pfunccallNode4 = (PFuncCall)nodeArrayList3.get(0);

        pexprNode3 = new AFuncCallExpr(pfunccallNode4);
        }

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ATermMultFactor$ExprInPars1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ATermMultFactor$SignedExpr1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ATermDivFactor$IntConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        TIntConst tintconstNode4;
        tintconstNode4 = (TIntConst)nodeArrayList3.get(0);

        pexprNode3 = new AIntConstExpr(tintconstNode4);
        }

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce ATermDivFactor$CharConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        TCharConst tcharconstNode4;
        tcharconstNode4 = (TCharConst)nodeArrayList3.get(0);

        pexprNode3 = new ACharConstExpr(tcharconstNode4);
        }

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ATermDivFactor$LValue1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        PLValue plvalueNode4;
        plvalueNode4 = (PLValue)nodeArrayList3.get(0);

        pexprNode3 = new ALValueExpr(plvalueNode4);
        }

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce ATermDivFactor$FuncCall1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        PFuncCall pfunccallNode4;
        pfunccallNode4 = (PFuncCall)nodeArrayList3.get(0);

        pexprNode3 = new AFuncCallExpr(pfunccallNode4);
        }

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ATermDivFactor$ExprInPars1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ATermDivFactor$SignedExpr1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ATermDivisionFactor$IntConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        TIntConst tintconstNode4;
        tintconstNode4 = (TIntConst)nodeArrayList3.get(0);

        pexprNode3 = new AIntConstExpr(tintconstNode4);
        }

        pexprNode1 = new ADivisionExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ATermDivisionFactor$CharConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        TCharConst tcharconstNode4;
        tcharconstNode4 = (TCharConst)nodeArrayList3.get(0);

        pexprNode3 = new ACharConstExpr(tcharconstNode4);
        }

        pexprNode1 = new ADivisionExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ATermDivisionFactor$LValue1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        PLValue plvalueNode4;
        plvalueNode4 = (PLValue)nodeArrayList3.get(0);

        pexprNode3 = new ALValueExpr(plvalueNode4);
        }

        pexprNode1 = new ADivisionExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ATermDivisionFactor$FuncCall1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        PFuncCall pfunccallNode4;
        pfunccallNode4 = (PFuncCall)nodeArrayList3.get(0);

        pexprNode3 = new AFuncCallExpr(pfunccallNode4);
        }

        pexprNode1 = new ADivisionExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce ATermDivisionFactor$ExprInPars1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivisionExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ATermDivisionFactor$SignedExpr1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivisionExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce ATermModFactor$IntConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        TIntConst tintconstNode4;
        tintconstNode4 = (TIntConst)nodeArrayList3.get(0);

        pexprNode3 = new AIntConstExpr(tintconstNode4);
        }

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ATermModFactor$CharConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        TCharConst tcharconstNode4;
        tcharconstNode4 = (TCharConst)nodeArrayList3.get(0);

        pexprNode3 = new ACharConstExpr(tcharconstNode4);
        }

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ATermModFactor$LValue1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        PLValue plvalueNode4;
        plvalueNode4 = (PLValue)nodeArrayList3.get(0);

        pexprNode3 = new ALValueExpr(plvalueNode4);
        }

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce ATermModFactor$FuncCall1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        PFuncCall pfunccallNode4;
        pfunccallNode4 = (PFuncCall)nodeArrayList3.get(0);

        pexprNode3 = new AFuncCallExpr(pfunccallNode4);
        }

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ATermModFactor$ExprInPars1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ATermModFactor$SignedExpr1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AFactor$IntConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList1.get(0);

        pexprNode1 = new AIntConstExpr(tintconstNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AFactor$CharConst1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        pexprNode1 = new ACharConstExpr(tcharconstNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AFactor$LValue1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLValue plvalueNode2;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);

        pexprNode1 = new ALValueExpr(plvalueNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AFactor$FuncCall1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pexprNode1 = new AFuncCallExpr(pfunccallNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AFactor$ExprInPars1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AFactor$SignedExpr1Term */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce AExprInPars */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ASignFactor$IntConst1SignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIntConst tintconstNode2;
        tintconstNode2 = (TIntConst)nodeArrayList2.get(0);

        pexprNode1 = new AIntConstExpr(tintconstNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ASignFactor$CharConst1SignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList2.get(0);

        pexprNode1 = new ACharConstExpr(tcharconstNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ASignFactor$LValue1SignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLValue plvalueNode2;
        plvalueNode2 = (PLValue)nodeArrayList2.get(0);

        pexprNode1 = new ALValueExpr(plvalueNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce ASignFactor$FuncCall1SignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList2.get(0);

        pexprNode1 = new AFuncCallExpr(pfunccallNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ASignFactor$ExprInPars1SignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ASignFactor$SignedExpr1SignedExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce APlusSignSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce AMinusSignSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ANotCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce ACondAndTermcondCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        PCond pcondNode3;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList3.get(0);

        pcondNode1 = new AAndCond(pcondNode2, pcondNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce ACondOrTermcondCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        PCond pcondNode3;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList3.get(0);

        pcondNode1 = new AOrCond(pcondNode2, pcondNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce ATermcondCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce ANotNotCondNotCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce ANotTermcondNotCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce ACondInParsTermcond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList1.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce AExprNumopExprTermcond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pcondNode1 = new ANumopCond(pexprNode2, pexprNode3);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce ACondInPars */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        pcondNode1 = (PCond)nodeArrayList2.get(0);
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce ANumopExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce AEqualNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce AHashtagNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new111() /* reduce AUnequalNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new112() /* reduce ALesserNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new113() /* reduce AGreaterNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new114() /* reduce ALesseqNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new115() /* reduce AGreateqNumop */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new116() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new117() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new118() /* reduce ATerminal$HeaderNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFparDef pfpardefNode1;
        pfpardefNode1 = (PFparDef)nodeArrayList1.get(0);
	if(pfpardefNode1 != null)
	{
	  listNode2.add(pfpardefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new119() /* reduce ANonTerminal$HeaderNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFparDef pfpardefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfpardefNode2 = (PFparDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfpardefNode2 != null)
	{
	  listNode3.add(pfpardefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new120() /* reduce ATerminal$FparDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	if(tidNode1 != null)
	{
	  listNode2.add(tidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new121() /* reduce ANonTerminal$FparDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TId tidNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidNode2 = (TId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidNode2 != null)
	{
	  listNode3.add(tidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new122() /* reduce ATerminal$Dimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIntConst tintconstNode1;
        tintconstNode1 = (TIntConst)nodeArrayList1.get(0);
	if(tintconstNode1 != null)
	{
	  listNode2.add(tintconstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new123() /* reduce ANonTerminal$Dimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TIntConst tintconstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tintconstNode2 = (TIntConst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tintconstNode2 != null)
	{
	  listNode3.add(tintconstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new124() /* reduce ATerminal$NextDimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIntConst tintconstNode1;
        tintconstNode1 = (TIntConst)nodeArrayList1.get(0);
	if(tintconstNode1 != null)
	{
	  listNode2.add(tintconstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new125() /* reduce ANonTerminal$NextDimension */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TIntConst tintconstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tintconstNode2 = (TIntConst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tintconstNode2 != null)
	{
	  listNode3.add(tintconstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new126() /* reduce ATerminal$VarDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	if(tidNode1 != null)
	{
	  listNode2.add(tidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new127() /* reduce ANonTerminal$VarDefNextId */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TId tidNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidNode2 = (TId)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidNode2 != null)
	{
	  listNode3.add(tidNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new128() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new129() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new130() /* reduce ATerminal$FuncCallNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new131() /* reduce ANonTerminal$FuncCallNextArg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {5, SHIFT, 1}, },
			{{-1, ERROR, 1}, {17, SHIFT, 5}, },
			{{-1, ERROR, 2}, {45, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {5, SHIFT, 1}, {15, SHIFT, 6}, {38, SHIFT, 7}, },
			{{-1, ERROR, 5}, {34, SHIFT, 15}, },
			{{-1, ERROR, 6}, {17, SHIFT, 16}, },
			{{-1, ERROR, 7}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {38, SHIFT, 7}, {39, SHIFT, 22}, {41, SHIFT, 23}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 9}, {5, SHIFT, 1}, {15, SHIFT, 6}, {38, SHIFT, 7}, {41, SHIFT, 32}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 14}, {5, SHIFT, 1}, {15, SHIFT, 6}, {38, SHIFT, 7}, },
			{{-1, ERROR, 15}, {12, SHIFT, 35}, {17, SHIFT, 36}, {35, SHIFT, 37}, },
			{{-1, ERROR, 16}, {40, SHIFT, 40}, {42, SHIFT, 41}, },
			{{-1, ERROR, 17}, {9, SHIFT, 44}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 49}, },
			{{-1, ERROR, 18}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, {41, SHIFT, 62}, },
			{{-1, ERROR, 19}, {9, SHIFT, 44}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 49}, },
			{{-1, REDUCE, 54}, {34, SHIFT, 65}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 29}, {41, SHIFT, 66}, },
			{{-1, ERROR, 30}, {36, SHIFT, 67}, {43, SHIFT, 68}, },
			{{-1, ERROR, 31}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {38, SHIFT, 7}, {39, SHIFT, 69}, {41, SHIFT, 23}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 35}, {17, SHIFT, 71}, },
			{{-1, ERROR, 36}, {40, SHIFT, 72}, {42, SHIFT, 73}, },
			{{-1, ERROR, 37}, {42, SHIFT, 76}, },
			{{-1, ERROR, 38}, {35, SHIFT, 77}, },
			{{-1, REDUCE, 5}, {41, SHIFT, 78}, },
			{{-1, ERROR, 40}, {17, SHIFT, 81}, },
			{{-1, ERROR, 41}, {1, SHIFT, 82}, {7, SHIFT, 83}, },
			{{-1, REDUCE, 126}, },
			{{-1, ERROR, 43}, {40, SHIFT, 40}, {42, SHIFT, 86}, },
			{{-1, ERROR, 44}, {9, SHIFT, 44}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 49}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 49}, {9, SHIFT, 44}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 49}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 86}, {36, SHIFT, 67}, },
			{{-1, ERROR, 52}, {23, SHIFT, 92}, {24, SHIFT, 93}, {27, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, {30, SHIFT, 97}, {31, SHIFT, 98}, {32, SHIFT, 99}, {33, SHIFT, 100}, },
			{{-1, REDUCE, 59}, {2, SHIFT, 103}, {8, SHIFT, 104}, {25, SHIFT, 105}, {26, SHIFT, 106}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 56}, {17, SHIFT, 20}, {18, SHIFT, 107}, {19, SHIFT, 108}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, ERROR, 57}, {0, SHIFT, 113}, {11, SHIFT, 114}, {14, SHIFT, 115}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 61}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 63}, {23, SHIFT, 92}, {24, SHIFT, 93}, {41, SHIFT, 117}, },
			{{-1, ERROR, 64}, {0, SHIFT, 113}, {3, SHIFT, 118}, {11, SHIFT, 114}, },
			{{-1, ERROR, 65}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, {35, SHIFT, 119}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 67}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, ERROR, 68}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 129}, },
			{{-1, ERROR, 71}, {40, SHIFT, 72}, {42, SHIFT, 124}, },
			{{-1, ERROR, 72}, {17, SHIFT, 126}, },
			{{-1, ERROR, 73}, {1, SHIFT, 82}, {7, SHIFT, 83}, },
			{{-1, REDUCE, 120}, },
			{{-1, ERROR, 75}, {40, SHIFT, 72}, {42, SHIFT, 129}, },
			{{-1, ERROR, 76}, {1, SHIFT, 82}, {7, SHIFT, 83}, {10, SHIFT, 131}, },
			{{-1, ERROR, 77}, {42, SHIFT, 134}, },
			{{-1, ERROR, 78}, {12, SHIFT, 35}, {17, SHIFT, 36}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 6}, {41, SHIFT, 78}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, {36, SHIFT, 137}, },
			{{-1, ERROR, 85}, {41, SHIFT, 140}, },
			{{-1, ERROR, 86}, {1, SHIFT, 82}, {7, SHIFT, 83}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 90}, {23, SHIFT, 92}, {24, SHIFT, 93}, {27, SHIFT, 94}, {28, SHIFT, 95}, {29, SHIFT, 96}, {30, SHIFT, 97}, {31, SHIFT, 98}, {32, SHIFT, 99}, {33, SHIFT, 100}, {35, SHIFT, 142}, },
			{{-1, ERROR, 91}, {0, SHIFT, 113}, {11, SHIFT, 114}, {35, SHIFT, 143}, },
			{{-1, ERROR, 92}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, ERROR, 93}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 111}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 102}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, ERROR, 103}, {17, SHIFT, 20}, {18, SHIFT, 147}, {19, SHIFT, 148}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, ERROR, 104}, {17, SHIFT, 20}, {18, SHIFT, 153}, {19, SHIFT, 154}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, ERROR, 105}, {17, SHIFT, 20}, {18, SHIFT, 159}, {19, SHIFT, 160}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, ERROR, 106}, {17, SHIFT, 20}, {18, SHIFT, 165}, {19, SHIFT, 166}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 93}, {36, SHIFT, 67}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 113}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 49}, },
			{{-1, ERROR, 114}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 49}, },
			{{-1, ERROR, 115}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {38, SHIFT, 7}, {41, SHIFT, 23}, },
			{{-1, ERROR, 116}, {23, SHIFT, 92}, {24, SHIFT, 93}, {35, SHIFT, 142}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 118}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {38, SHIFT, 7}, {41, SHIFT, 23}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 120}, {35, SHIFT, 177}, },
			{{-1, REDUCE, 51}, {23, SHIFT, 92}, {24, SHIFT, 93}, {40, SHIFT, 178}, },
			{{-1, ERROR, 122}, {23, SHIFT, 92}, {24, SHIFT, 93}, {37, SHIFT, 181}, },
			{{-1, ERROR, 123}, {23, SHIFT, 92}, {24, SHIFT, 93}, {41, SHIFT, 182}, },
			{{-1, ERROR, 124}, {1, SHIFT, 82}, {7, SHIFT, 83}, },
			{{-1, ERROR, 125}, {40, SHIFT, 72}, {42, SHIFT, 184}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 20}, {36, SHIFT, 185}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 129}, {1, SHIFT, 82}, {7, SHIFT, 83}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 134}, {1, SHIFT, 82}, {7, SHIFT, 83}, {10, SHIFT, 131}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 137}, {18, SHIFT, 191}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 16}, {36, SHIFT, 137}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 141}, {41, SHIFT, 193}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 57}, {2, SHIFT, 103}, {8, SHIFT, 104}, {25, SHIFT, 105}, {26, SHIFT, 106}, },
			{{-1, REDUCE, 58}, {2, SHIFT, 103}, {8, SHIFT, 104}, {25, SHIFT, 105}, {26, SHIFT, 106}, },
			{{-1, REDUCE, 108}, {23, SHIFT, 92}, {24, SHIFT, 93}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 68}, {36, SHIFT, 67}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 80}, {36, SHIFT, 67}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 62}, {36, SHIFT, 67}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 74}, {36, SHIFT, 67}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 33}, {4, SHIFT, 194}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 178}, {17, SHIFT, 20}, {18, SHIFT, 45}, {19, SHIFT, 46}, {21, SHIFT, 21}, {23, SHIFT, 47}, {24, SHIFT, 48}, {34, SHIFT, 61}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 52}, {40, SHIFT, 178}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 184}, {1, SHIFT, 82}, {7, SHIFT, 83}, },
			{{-1, ERROR, 185}, {18, SHIFT, 198}, {37, SHIFT, 199}, },
			{{-1, REDUCE, 21}, {36, SHIFT, 200}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 22}, {36, SHIFT, 200}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 191}, {37, SHIFT, 203}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 194}, {6, SHIFT, 17}, {13, SHIFT, 18}, {16, SHIFT, 19}, {17, SHIFT, 20}, {21, SHIFT, 21}, {38, SHIFT, 7}, {41, SHIFT, 23}, },
			{{-1, REDUCE, 53}, {23, SHIFT, 92}, {24, SHIFT, 93}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 198}, {37, SHIFT, 206}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 200}, {18, SHIFT, 198}, },
			{{-1, REDUCE, 23}, {36, SHIFT, 200}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 25}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 9}, {0, 4}, },
			{{-1, 38}, },
			{{-1, 79}, {80, 136}, },
			{{-1, 39}, {78, 135}, },
			{{-1, 74}, {75, 130}, {125, 130}, },
			{{-1, 127}, {41, 84}, {76, 132}, {86, 84}, {134, 132}, },
			{{-1, 85}, {86, 141}, },
			{{-1, 138}, {139, 192}, },
			{{-1, 133}, {134, 190}, },
			{{-1, 128}, {124, 183}, {129, 189}, {184, 197}, },
			{{-1, 186}, },
			{{-1, 187}, {188, 202}, {201, 202}, },
			{{-1, 10}, {14, 33}, },
			{{-1, 11}, },
			{{-1, 42}, {43, 87}, },
			{{-1, 12}, },
			{{-1, 24}, {31, 70}, {115, 173}, },
			{{-1, 25}, {115, 174}, {118, 175}, {194, 204}, },
			{{-1, 26}, {118, 176}, {194, 205}, },
			{{-1, 27}, },
			{{-1, 28}, {4, 13}, {9, 13}, {14, 34}, },
			{{-1, 50}, {7, 29}, {31, 29}, {56, 109}, {103, 149}, {104, 155}, {105, 161}, {106, 167}, {115, 29}, {118, 29}, {194, 29}, },
			{{-1, 120}, },
			{{-1, 179}, {180, 196}, },
			{{-1, 51}, {7, 30}, {31, 30}, {56, 110}, {103, 150}, {104, 156}, {105, 162}, {106, 168}, {115, 30}, {118, 30}, {194, 30}, },
			{{-1, 52}, {18, 63}, {49, 90}, {61, 116}, {65, 121}, {67, 122}, {68, 123}, {102, 146}, {178, 195}, },
			{{-1, 53}, {92, 144}, {93, 145}, },
			{{-1, 54}, {56, 111}, {103, 151}, {104, 157}, {105, 163}, {106, 169}, },
			{{-1, 55}, {56, 112}, {103, 152}, {104, 158}, {105, 164}, {106, 170}, },
			{{-1, 56}, },
			{{-1, 57}, {19, 64}, {49, 91}, },
			{{-1, 58}, {44, 88}, },
			{{-1, 59}, {44, 89}, {113, 171}, {114, 172}, },
			{{-1, 60}, },
			{{-1, 101}, },
			{{-1, 102}, },
			{{-1, 14}, },
			{{-1, 80}, },
			{{-1, 75}, {71, 125}, },
			{{-1, 139}, },
			{{-1, 188}, {186, 201}, },
			{{-1, 43}, },
			{{-1, 31}, },
			{{-1, 180}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'fun', 'var', '{'",
			"expecting: '('",
			"expecting: 'if', 'return', 'while', id, string literal, '{', '}', ';'",
			"expecting: 'fun', 'var', '{', ';'",
			"expecting: 'fun', 'var', '{', EOF",
			"expecting: 'ref', id, ')'",
			"expecting: ',', ':'",
			"expecting: 'not', id, int const, char const, string literal, '+', '-', '('",
			"expecting: id, int const, char const, string literal, '+', '-', '(', ';'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '+', '-', '*', '/', '#', '=', '<', '>', '<=', '>=', '<>', '(', ')', '[', ']', ',', ';', '<-'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '+', '-', '*', '/', '#', '=', '<', '>', '<=', '>=', '<>', ')', '[', ']', ',', ';', '<-'",
			"expecting: 'else', 'fun', 'if', 'return', 'var', 'while', id, string literal, '{', '}', ';', EOF",
			"expecting: 'else', 'if', 'return', 'while', id, string literal, '{', '}', ';'",
			"expecting: ';'",
			"expecting: '[', '<-'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: 'char', 'int'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '+', '-', '*', '/', '#', '=', '<', '>', '<=', '>=', '<>', ')', ']', ',', ';'",
			"expecting: id, int const, char const, string literal, '+', '-', '('",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '+', '-', '*', '/', '#', '=', '<', '>', '<=', '>=', '<>', ')', '[', ']', ',', ';'",
			"expecting: '+', '-', '#', '=', '<', '>', '<=', '>=', '<>'",
			"expecting: 'and', 'or', 'then'",
			"expecting: 'and', 'do', 'or', 'then', ')'",
			"expecting: '+', '-', ';'",
			"expecting: 'and', 'do', 'or'",
			"expecting: id, int const, char const, string literal, '+', '-', '(', ')'",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: 'ref', id",
			"expecting: 'fun', 'var', ')', '[', '{', ';'",
			"expecting: '[', ';'",
			"expecting: '+', '-', '#', '=', '<', '>', '<=', '>=', '<>', ')'",
			"expecting: 'and', 'or', ')'",
			"expecting: 'if', 'return', 'while', id, string literal, '{', ';'",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ')', ','",
			"expecting: '+', '-', ']'",
			"expecting: ')', '[', ';'",
			"expecting: int const",
			"expecting: 'and', 'do', 'or', 'then', '+', '-', ')'",
			"expecting: ')', ','",
			"expecting: int const, ']'",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 5, 3, 6, 3, 3, 3, 7, 3, 8, 9, 10, 11, 10, 12, 13, 14, 15, 5, 5, 5, 15, 15, 16, 17, 5, 3, 3, 7, 1, 9, 18, 19, 20, 1, 21, 9, 9, 10, 22, 22, 23, 23, 10, 22, 24, 25, 22, 22, 22, 23, 26, 27, 27, 27, 23, 15, 28, 29, 30, 15, 23, 23, 14, 5, 9, 1, 21, 9, 9, 31, 18, 32, 20, 20, 9, 33, 33, 34, 16, 21, 9, 27, 27, 35, 36, 23, 23, 23, 23, 23, 23, 23, 23, 23, 27, 23, 23, 23, 23, 23, 22, 22, 22, 24, 22, 22, 23, 23, 37, 38, 15, 37, 22, 19, 39, 40, 28, 21, 9, 9, 41, 20, 21, 9, 6, 6, 6, 31, 20, 20, 42, 34, 34, 3, 16, 22, 27, 22, 22, 43, 22, 22, 22, 24, 22, 22, 22, 22, 22, 24, 22, 22, 22, 22, 22, 24, 22, 22, 22, 22, 22, 24, 22, 22, 27, 27, 5, 15, 15, 5, 22, 23, 44, 44, 13, 15, 20, 21, 45, 41, 41, 41, 20, 6, 46, 34, 3, 37, 39, 44, 20, 46, 41, 42, 41, 41, 34, 15, 5, 41, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ASignLValueSignedExpr extends PSignedExpr
{
    private PMultSigns _multSigns_;
    private PLValue _lValue_;

    public ASignLValueSignedExpr()
    {
        // Constructor
    }

    public ASignLValueSignedExpr(
        @SuppressWarnings("hiding") PMultSigns _multSigns_,
        @SuppressWarnings("hiding") PLValue _lValue_)
    {
        // Constructor
        setMultSigns(_multSigns_);

        setLValue(_lValue_);

    }

    @Override
    public Object clone()
    {
        return new ASignLValueSignedExpr(
            cloneNode(this._multSigns_),
            cloneNode(this._lValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASignLValueSignedExpr(this);
    }

    public PMultSigns getMultSigns()
    {
        return this._multSigns_;
    }

    public void setMultSigns(PMultSigns node)
    {
        if(this._multSigns_ != null)
        {
            this._multSigns_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multSigns_ = node;
    }

    public PLValue getLValue()
    {
        return this._lValue_;
    }

    public void setLValue(PLValue node)
    {
        if(this._lValue_ != null)
        {
            this._lValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._multSigns_)
            + toString(this._lValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._multSigns_ == child)
        {
            this._multSigns_ = null;
            return;
        }

        if(this._lValue_ == child)
        {
            this._lValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._multSigns_ == oldChild)
        {
            setMultSigns((PMultSigns) newChild);
            return;
        }

        if(this._lValue_ == oldChild)
        {
            setLValue((PLValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

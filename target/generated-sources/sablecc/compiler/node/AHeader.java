/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AHeader extends PHeader
{
    private TId _id_;
    private final LinkedList<PFparDef> _fparDef_ = new LinkedList<PFparDef>();
    private PRetType _retType_;

    public AHeader()
    {
        // Constructor
    }

    public AHeader(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<PFparDef> _fparDef_,
        @SuppressWarnings("hiding") PRetType _retType_)
    {
        // Constructor
        setId(_id_);

        setFparDef(_fparDef_);

        setRetType(_retType_);

    }

    @Override
    public Object clone()
    {
        return new AHeader(
            cloneNode(this._id_),
            cloneList(this._fparDef_),
            cloneNode(this._retType_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHeader(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PFparDef> getFparDef()
    {
        return this._fparDef_;
    }

    public void setFparDef(List<PFparDef> list)
    {
        this._fparDef_.clear();
        this._fparDef_.addAll(list);
        for(PFparDef e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PRetType getRetType()
    {
        return this._retType_;
    }

    public void setRetType(PRetType node)
    {
        if(this._retType_ != null)
        {
            this._retType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._retType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._fparDef_)
            + toString(this._retType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._fparDef_.remove(child))
        {
            return;
        }

        if(this._retType_ == child)
        {
            this._retType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PFparDef> i = this._fparDef_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFparDef) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._retType_ == oldChild)
        {
            setRetType((PRetType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

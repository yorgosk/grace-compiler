/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AVarDefNextId extends PVarDefNextId
{
    private TComma _comma_;
    private TId _nextVarDefId_;

    public AVarDefNextId()
    {
        // Constructor
    }

    public AVarDefNextId(
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") TId _nextVarDefId_)
    {
        // Constructor
        setComma(_comma_);

        setNextVarDefId(_nextVarDefId_);

    }

    @Override
    public Object clone()
    {
        return new AVarDefNextId(
            cloneNode(this._comma_),
            cloneNode(this._nextVarDefId_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarDefNextId(this);
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public TId getNextVarDefId()
    {
        return this._nextVarDefId_;
    }

    public void setNextVarDefId(TId node)
    {
        if(this._nextVarDefId_ != null)
        {
            this._nextVarDefId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nextVarDefId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comma_)
            + toString(this._nextVarDefId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._nextVarDefId_ == child)
        {
            this._nextVarDefId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._nextVarDefId_ == oldChild)
        {
            setNextVarDefId((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

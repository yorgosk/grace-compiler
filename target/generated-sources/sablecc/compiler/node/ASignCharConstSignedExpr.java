/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ASignCharConstSignedExpr extends PSignedExpr
{
    private PMultSigns _multSigns_;
    private TCharConst _charConst_;

    public ASignCharConstSignedExpr()
    {
        // Constructor
    }

    public ASignCharConstSignedExpr(
        @SuppressWarnings("hiding") PMultSigns _multSigns_,
        @SuppressWarnings("hiding") TCharConst _charConst_)
    {
        // Constructor
        setMultSigns(_multSigns_);

        setCharConst(_charConst_);

    }

    @Override
    public Object clone()
    {
        return new ASignCharConstSignedExpr(
            cloneNode(this._multSigns_),
            cloneNode(this._charConst_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASignCharConstSignedExpr(this);
    }

    public PMultSigns getMultSigns()
    {
        return this._multSigns_;
    }

    public void setMultSigns(PMultSigns node)
    {
        if(this._multSigns_ != null)
        {
            this._multSigns_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._multSigns_ = node;
    }

    public TCharConst getCharConst()
    {
        return this._charConst_;
    }

    public void setCharConst(TCharConst node)
    {
        if(this._charConst_ != null)
        {
            this._charConst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._charConst_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._multSigns_)
            + toString(this._charConst_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._multSigns_ == child)
        {
            this._multSigns_ = null;
            return;
        }

        if(this._charConst_ == child)
        {
            this._charConst_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._multSigns_ == oldChild)
        {
            setMultSigns((PMultSigns) newChild);
            return;
        }

        if(this._charConst_ == oldChild)
        {
            setCharConst((TCharConst) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

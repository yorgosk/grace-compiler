/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AHeaderParams extends PHeaderParams
{
    private PFparDef _fparDef_;
    private final LinkedList<PHeaderNextArg> _headerNextArg_ = new LinkedList<PHeaderNextArg>();

    public AHeaderParams()
    {
        // Constructor
    }

    public AHeaderParams(
        @SuppressWarnings("hiding") PFparDef _fparDef_,
        @SuppressWarnings("hiding") List<PHeaderNextArg> _headerNextArg_)
    {
        // Constructor
        setFparDef(_fparDef_);

        setHeaderNextArg(_headerNextArg_);

    }

    @Override
    public Object clone()
    {
        return new AHeaderParams(
            cloneNode(this._fparDef_),
            cloneList(this._headerNextArg_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHeaderParams(this);
    }

    public PFparDef getFparDef()
    {
        return this._fparDef_;
    }

    public void setFparDef(PFparDef node)
    {
        if(this._fparDef_ != null)
        {
            this._fparDef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fparDef_ = node;
    }

    public LinkedList<PHeaderNextArg> getHeaderNextArg()
    {
        return this._headerNextArg_;
    }

    public void setHeaderNextArg(List<PHeaderNextArg> list)
    {
        this._headerNextArg_.clear();
        this._headerNextArg_.addAll(list);
        for(PHeaderNextArg e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fparDef_)
            + toString(this._headerNextArg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fparDef_ == child)
        {
            this._fparDef_ = null;
            return;
        }

        if(this._headerNextArg_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fparDef_ == oldChild)
        {
            setFparDef((PFparDef) newChild);
            return;
        }

        for(ListIterator<PHeaderNextArg> i = this._headerNextArg_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PHeaderNextArg) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

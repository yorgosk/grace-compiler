/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ANestedIfElseWithElse extends PWithElse
{
    private TIf _if_;
    private PCond _cond_;
    private TThen _then_;
    private PWithElse _withElse_;
    private PElseWithElse _elseWithElse_;

    public ANestedIfElseWithElse()
    {
        // Constructor
    }

    public ANestedIfElseWithElse(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PCond _cond_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PWithElse _withElse_,
        @SuppressWarnings("hiding") PElseWithElse _elseWithElse_)
    {
        // Constructor
        setIf(_if_);

        setCond(_cond_);

        setThen(_then_);

        setWithElse(_withElse_);

        setElseWithElse(_elseWithElse_);

    }

    @Override
    public Object clone()
    {
        return new ANestedIfElseWithElse(
            cloneNode(this._if_),
            cloneNode(this._cond_),
            cloneNode(this._then_),
            cloneNode(this._withElse_),
            cloneNode(this._elseWithElse_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANestedIfElseWithElse(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PCond getCond()
    {
        return this._cond_;
    }

    public void setCond(PCond node)
    {
        if(this._cond_ != null)
        {
            this._cond_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cond_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PWithElse getWithElse()
    {
        return this._withElse_;
    }

    public void setWithElse(PWithElse node)
    {
        if(this._withElse_ != null)
        {
            this._withElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._withElse_ = node;
    }

    public PElseWithElse getElseWithElse()
    {
        return this._elseWithElse_;
    }

    public void setElseWithElse(PElseWithElse node)
    {
        if(this._elseWithElse_ != null)
        {
            this._elseWithElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseWithElse_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._cond_)
            + toString(this._then_)
            + toString(this._withElse_)
            + toString(this._elseWithElse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._cond_ == child)
        {
            this._cond_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._withElse_ == child)
        {
            this._withElse_ = null;
            return;
        }

        if(this._elseWithElse_ == child)
        {
            this._elseWithElse_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._cond_ == oldChild)
        {
            setCond((PCond) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._withElse_ == oldChild)
        {
            setWithElse((PWithElse) newChild);
            return;
        }

        if(this._elseWithElse_ == oldChild)
        {
            setElseWithElse((PElseWithElse) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import compiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFuncDef(AFuncDef node);
    void caseAHeader(AHeader node);
    void caseAHeaderParams(AHeaderParams node);
    void caseAHeaderNextArg(AHeaderNextArg node);
    void caseAFparDef(AFparDef node);
    void caseAFparDefNextId(AFparDefNextId node);
    void caseAIntDataType(AIntDataType node);
    void caseACharDataType(ACharDataType node);
    void caseAType(AType node);
    void caseADimension(ADimension node);
    void caseADataTypeRetType(ADataTypeRetType node);
    void caseANothingRetType(ANothingRetType node);
    void caseAFparType(AFparType node);
    void caseALRBrackets(ALRBrackets node);
    void caseANextDimension(ANextDimension node);
    void caseAFuncDefLocalDef(AFuncDefLocalDef node);
    void caseAFuncDeclLocalDef(AFuncDeclLocalDef node);
    void caseAVarDefLocalDef(AVarDefLocalDef node);
    void caseAVarDef(AVarDef node);
    void caseAVarDefNextId(AVarDefNextId node);
    void caseAFuncDecl(AFuncDecl node);
    void caseAMatchedStmt(AMatchedStmt node);
    void caseAUnmatchedStmt(AUnmatchedStmt node);
    void caseAIfMatchedElseMatchedMatched(AIfMatchedElseMatchedMatched node);
    void caseAWhileMatchedMatched(AWhileMatchedMatched node);
    void caseAOtherMatched(AOtherMatched node);
    void caseAIfUnmatched(AIfUnmatched node);
    void caseAIfMatchedElseUnmatchedUnmatched(AIfMatchedElseUnmatchedUnmatched node);
    void caseASemicolonOtherStmt(ASemicolonOtherStmt node);
    void caseAAssignmentOtherStmt(AAssignmentOtherStmt node);
    void caseABlockOtherStmt(ABlockOtherStmt node);
    void caseAFunctionOtherStmt(AFunctionOtherStmt node);
    void caseAReturnExprOtherStmt(AReturnExprOtherStmt node);
    void caseABlock(ABlock node);
    void caseAFuncCall(AFuncCall node);
    void caseAFuncArgs(AFuncArgs node);
    void caseAFuncCallNextArg(AFuncCallNextArg node);
    void caseAIdLValue(AIdLValue node);
    void caseAStringLValue(AStringLValue node);
    void caseAExpressionLValue(AExpressionLValue node);
    void caseAExprPlusTermExpr(AExprPlusTermExpr node);
    void caseAExprMinusTermExpr(AExprMinusTermExpr node);
    void caseATermExpr(ATermExpr node);
    void caseATermMultFactorTerm(ATermMultFactorTerm node);
    void caseATermDivFactorTerm(ATermDivFactorTerm node);
    void caseATermDivisionFactorTerm(ATermDivisionFactorTerm node);
    void caseATermModFactorTerm(ATermModFactorTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAIntConstFactor(AIntConstFactor node);
    void caseACharConstFactor(ACharConstFactor node);
    void caseALValueFactor(ALValueFactor node);
    void caseAFuncCallFactor(AFuncCallFactor node);
    void caseAExprInParsFactor(AExprInParsFactor node);
    void caseASignedExprFactor(ASignedExprFactor node);
    void caseAExprInPars(AExprInPars node);
    void caseASignSignedExprSignedExpr(ASignSignedExprSignedExpr node);
    void caseASignFactorSignedExpr(ASignFactorSignedExpr node);
    void caseAPlusSignSign(APlusSignSign node);
    void caseAMinusSignSign(AMinusSignSign node);
    void caseANotCond(ANotCond node);
    void caseACondAndTermcondCond(ACondAndTermcondCond node);
    void caseACondOrTermcondCond(ACondOrTermcondCond node);
    void caseATermcondCond(ATermcondCond node);
    void caseANotNotCondNotCond(ANotNotCondNotCond node);
    void caseANotTermcondNotCond(ANotTermcondNotCond node);
    void caseACondInParsTermcond(ACondInParsTermcond node);
    void caseAExprNumopExprTermcond(AExprNumopExprTermcond node);
    void caseACondInPars(ACondInPars node);
    void caseANumopExpr(ANumopExpr node);
    void caseAEqualNumop(AEqualNumop node);
    void caseAHashtagNumop(AHashtagNumop node);
    void caseAUnequalNumop(AUnequalNumop node);
    void caseALesserNumop(ALesserNumop node);
    void caseAGreaterNumop(AGreaterNumop node);
    void caseALesseqNumop(ALesseqNumop node);
    void caseAGreateqNumop(AGreateqNumop node);

    void caseTAnd(TAnd node);
    void caseTChar(TChar node);
    void caseTDiv(TDiv node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTFun(TFun node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTMod(TMod node);
    void caseTNot(TNot node);
    void caseTNothing(TNothing node);
    void caseTOr(TOr node);
    void caseTRef(TRef node);
    void caseTReturn(TReturn node);
    void caseTThen(TThen node);
    void caseTVar(TVar node);
    void caseTWhile(TWhile node);
    void caseTId(TId node);
    void caseTIntConst(TIntConst node);
    void caseTCharConst(TCharConst node);
    void caseTSCharSequence(TSCharSequence node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTErroneousNumber(TErroneousNumber node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDivision(TDivision node);
    void caseTHashtag(THashtag node);
    void caseTEqual(TEqual node);
    void caseTLesser(TLesser node);
    void caseTGreater(TGreater node);
    void caseTLesseq(TLesseq node);
    void caseTGreateq(TGreateq node);
    void caseTUnequal(TUnequal node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTAssignment(TAssignment node);
    void caseTIdentifier(TIdentifier node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTMultilineComment(TMultilineComment node);
    void caseEOF(EOF node);
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAFuncDef(AFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDef(AFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        inAFuncDef(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAFuncDef(node);
    }

    public void inAHeaderNextArg(AHeaderNextArg node)
    {
        defaultIn(node);
    }

    public void outAHeaderNextArg(AHeaderNextArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeaderNextArg(AHeaderNextArg node)
    {
        inAHeaderNextArg(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAHeaderNextArg(node);
    }

    public void inAFunPars(AFunPars node)
    {
        defaultIn(node);
    }

    public void outAFunPars(AFunPars node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunPars(AFunPars node)
    {
        inAFunPars(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        {
            List<PHeaderNextArg> copy = new ArrayList<PHeaderNextArg>(node.getHeaderNextArg());
            for(PHeaderNextArg e : copy)
            {
                e.apply(this);
            }
        }
        outAFunPars(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFunPars() != null)
        {
            node.getFunPars().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        outAHeader(node);
    }

    public void inAFparDefNextId(AFparDefNextId node)
    {
        defaultIn(node);
    }

    public void outAFparDefNextId(AFparDefNextId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDefNextId(AFparDefNextId node)
    {
        inAFparDefNextId(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFparDefNextId(node);
    }

    public void inAFparDef(AFparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDef(AFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDef(AFparDef node)
    {
        inAFparDef(node);
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PFparDefNextId> copy = new ArrayList<PFparDefNextId>(node.getFparDefNextId());
            for(PFparDefNextId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFparType() != null)
        {
            node.getFparType().apply(this);
        }
        outAFparDef(node);
    }

    public void inAIntDataType(AIntDataType node)
    {
        defaultIn(node);
    }

    public void outAIntDataType(AIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDataType(AIntDataType node)
    {
        inAIntDataType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntDataType(node);
    }

    public void inACharDataType(ACharDataType node)
    {
        defaultIn(node);
    }

    public void outACharDataType(ACharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharDataType(ACharDataType node)
    {
        inACharDataType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharDataType(node);
    }

    public void inADimension(ADimension node)
    {
        defaultIn(node);
    }

    public void outADimension(ADimension node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADimension(ADimension node)
    {
        inADimension(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outADimension(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        {
            List<PDimension> copy = new ArrayList<PDimension>(node.getDimension());
            for(PDimension e : copy)
            {
                e.apply(this);
            }
        }
        outAType(node);
    }

    public void inADataTypeRetType(ADataTypeRetType node)
    {
        defaultIn(node);
    }

    public void outADataTypeRetType(ADataTypeRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypeRetType(ADataTypeRetType node)
    {
        inADataTypeRetType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outADataTypeRetType(node);
    }

    public void inANothingRetType(ANothingRetType node)
    {
        defaultIn(node);
    }

    public void outANothingRetType(ANothingRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANothingRetType(ANothingRetType node)
    {
        inANothingRetType(node);
        if(node.getNothing() != null)
        {
            node.getNothing().apply(this);
        }
        outANothingRetType(node);
    }

    public void inANextDimension(ANextDimension node)
    {
        defaultIn(node);
    }

    public void outANextDimension(ANextDimension node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextDimension(ANextDimension node)
    {
        inANextDimension(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outANextDimension(node);
    }

    public void inALRBrackets(ALRBrackets node)
    {
        defaultIn(node);
    }

    public void outALRBrackets(ALRBrackets node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALRBrackets(ALRBrackets node)
    {
        inALRBrackets(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outALRBrackets(node);
    }

    public void inAFparType(AFparType node)
    {
        defaultIn(node);
    }

    public void outAFparType(AFparType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparType(AFparType node)
    {
        inAFparType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getLRBrackets() != null)
        {
            node.getLRBrackets().apply(this);
        }
        {
            List<PNextDimension> copy = new ArrayList<PNextDimension>(node.getNextDimension());
            for(PNextDimension e : copy)
            {
                e.apply(this);
            }
        }
        outAFparType(node);
    }

    public void inAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        inAFuncDefLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAFuncDefLocalDef(node);
    }

    public void inAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        inAFuncDeclLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAFuncDeclLocalDef(node);
    }

    public void inAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultIn(node);
    }

    public void outAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefLocalDef(AVarDefLocalDef node)
    {
        inAVarDefLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAVarDefLocalDef(node);
    }

    public void inAVarDefNextId(AVarDefNextId node)
    {
        defaultIn(node);
    }

    public void outAVarDefNextId(AVarDefNextId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDefNextId(AVarDefNextId node)
    {
        inAVarDefNextId(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getNextVarDefId() != null)
        {
            node.getNextVarDefId().apply(this);
        }
        outAVarDefNextId(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getInitVarDefId() != null)
        {
            node.getInitVarDefId().apply(this);
        }
        {
            List<PVarDefNextId> copy = new ArrayList<PVarDefNextId>(node.getVarDefNextId());
            for(PVarDefNextId e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAVarDef(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inATerminalStatementStmt(ATerminalStatementStmt node)
    {
        defaultIn(node);
    }

    public void outATerminalStatementStmt(ATerminalStatementStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerminalStatementStmt(ATerminalStatementStmt node)
    {
        inATerminalStatementStmt(node);
        if(node.getTermStmt() != null)
        {
            node.getTermStmt().apply(this);
        }
        outATerminalStatementStmt(node);
    }

    public void inAIfStmtStmt(AIfStmtStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmtStmt(AIfStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtStmt(AIfStmtStmt node)
    {
        inAIfStmtStmt(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        outAIfStmtStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAIfIfStmt(AIfIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfIfStmt(AIfIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfIfStmt(AIfIfStmt node)
    {
        inAIfIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAIfIfStmt(node);
    }

    public void inAIfElseIfStmt(AIfElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfElseIfStmt(AIfElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseIfStmt(AIfElseIfStmt node)
    {
        inAIfElseIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getWithElse() != null)
        {
            node.getWithElse().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAIfElseIfStmt(node);
    }

    public void inANestedIfElseWithElse(ANestedIfElseWithElse node)
    {
        defaultIn(node);
    }

    public void outANestedIfElseWithElse(ANestedIfElseWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedIfElseWithElse(ANestedIfElseWithElse node)
    {
        inANestedIfElseWithElse(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getWithElse() != null)
        {
            node.getWithElse().apply(this);
        }
        if(node.getElseWithElse() != null)
        {
            node.getElseWithElse().apply(this);
        }
        outANestedIfElseWithElse(node);
    }

    public void inATerminalStatementWithElse(ATerminalStatementWithElse node)
    {
        defaultIn(node);
    }

    public void outATerminalStatementWithElse(ATerminalStatementWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerminalStatementWithElse(ATerminalStatementWithElse node)
    {
        inATerminalStatementWithElse(node);
        if(node.getTermStmt() != null)
        {
            node.getTermStmt().apply(this);
        }
        outATerminalStatementWithElse(node);
    }

    public void inAElseWithElse(AElseWithElse node)
    {
        defaultIn(node);
    }

    public void outAElseWithElse(AElseWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseWithElse(AElseWithElse node)
    {
        inAElseWithElse(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getWithElse() != null)
        {
            node.getWithElse().apply(this);
        }
        outAElseWithElse(node);
    }

    public void inASemicolonTermStmt(ASemicolonTermStmt node)
    {
        defaultIn(node);
    }

    public void outASemicolonTermStmt(ASemicolonTermStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonTermStmt(ASemicolonTermStmt node)
    {
        inASemicolonTermStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonTermStmt(node);
    }

    public void inAAssignmentTermStmt(AAssignmentTermStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignmentTermStmt(AAssignmentTermStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentTermStmt(AAssignmentTermStmt node)
    {
        inAAssignmentTermStmt(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignmentTermStmt(node);
    }

    public void inABlockTermStmt(ABlockTermStmt node)
    {
        defaultIn(node);
    }

    public void outABlockTermStmt(ABlockTermStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockTermStmt(ABlockTermStmt node)
    {
        inABlockTermStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockTermStmt(node);
    }

    public void inAFunctionTermStmt(AFunctionTermStmt node)
    {
        defaultIn(node);
    }

    public void outAFunctionTermStmt(AFunctionTermStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionTermStmt(AFunctionTermStmt node)
    {
        inAFunctionTermStmt(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFunctionTermStmt(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outABlock(node);
    }

    public void inAFuncCallNextArg(AFuncCallNextArg node)
    {
        defaultIn(node);
    }

    public void outAFuncCallNextArg(AFuncCallNextArg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallNextArg(AFuncCallNextArg node)
    {
        inAFuncCallNextArg(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getNextFuncCallExpr() != null)
        {
            node.getNextFuncCallExpr().apply(this);
        }
        outAFuncCallNextArg(node);
    }

    public void inAFuncArgs(AFuncArgs node)
    {
        defaultIn(node);
    }

    public void outAFuncArgs(AFuncArgs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncArgs(AFuncArgs node)
    {
        inAFuncArgs(node);
        if(node.getInitFuncCallExpr() != null)
        {
            node.getInitFuncCallExpr().apply(this);
        }
        {
            List<PFuncCallNextArg> copy = new ArrayList<PFuncCallNextArg>(node.getFuncCallNextArg());
            for(PFuncCallNextArg e : copy)
            {
                e.apply(this);
            }
        }
        outAFuncArgs(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFuncArgs() != null)
        {
            node.getFuncArgs().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFuncCall(node);
    }

    public void inALValue1LValue(ALValue1LValue node)
    {
        defaultIn(node);
    }

    public void outALValue1LValue(ALValue1LValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValue1LValue(ALValue1LValue node)
    {
        inALValue1LValue(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outALValue1LValue(node);
    }

    public void inALValue2LValue(ALValue2LValue node)
    {
        defaultIn(node);
    }

    public void outALValue2LValue(ALValue2LValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValue2LValue(ALValue2LValue node)
    {
        inALValue2LValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outALValue2LValue(node);
    }

    public void inALValue3LValue(ALValue3LValue node)
    {
        defaultIn(node);
    }

    public void outALValue3LValue(ALValue3LValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValue3LValue(ALValue3LValue node)
    {
        inALValue3LValue(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outALValue3LValue(node);
    }

    public void inAPlusSignSign(APlusSignSign node)
    {
        defaultIn(node);
    }

    public void outAPlusSignSign(APlusSignSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusSignSign(APlusSignSign node)
    {
        inAPlusSignSign(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusSignSign(node);
    }

    public void inAMinusSignSign(AMinusSignSign node)
    {
        defaultIn(node);
    }

    public void outAMinusSignSign(AMinusSignSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusSignSign(AMinusSignSign node)
    {
        inAMinusSignSign(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusSignSign(node);
    }

    public void inAPlusOpOp(APlusOpOp node)
    {
        defaultIn(node);
    }

    public void outAPlusOpOp(APlusOpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOpOp(APlusOpOp node)
    {
        inAPlusOpOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOpOp(node);
    }

    public void inAMinusOpOp(AMinusOpOp node)
    {
        defaultIn(node);
    }

    public void outAMinusOpOp(AMinusOpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOpOp(AMinusOpOp node)
    {
        inAMinusOpOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusOpOp(node);
    }

    public void inAMultOpOp(AMultOpOp node)
    {
        defaultIn(node);
    }

    public void outAMultOpOp(AMultOpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOpOp(AMultOpOp node)
    {
        inAMultOpOp(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultOpOp(node);
    }

    public void inADivOpOp(ADivOpOp node)
    {
        defaultIn(node);
    }

    public void outADivOpOp(ADivOpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOpOp(ADivOpOp node)
    {
        inADivOpOp(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivOpOp(node);
    }

    public void inAModOpOp(AModOpOp node)
    {
        defaultIn(node);
    }

    public void outAModOpOp(AModOpOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModOpOp(AModOpOp node)
    {
        inAModOpOp(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModOpOp(node);
    }

    public void inASignIntConstSignedExpr(ASignIntConstSignedExpr node)
    {
        defaultIn(node);
    }

    public void outASignIntConstSignedExpr(ASignIntConstSignedExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignIntConstSignedExpr(ASignIntConstSignedExpr node)
    {
        inASignIntConstSignedExpr(node);
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        outASignIntConstSignedExpr(node);
    }

    public void inASignCharConstSignedExpr(ASignCharConstSignedExpr node)
    {
        defaultIn(node);
    }

    public void outASignCharConstSignedExpr(ASignCharConstSignedExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignCharConstSignedExpr(ASignCharConstSignedExpr node)
    {
        inASignCharConstSignedExpr(node);
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outASignCharConstSignedExpr(node);
    }

    public void inASignLValueSignedExpr(ASignLValueSignedExpr node)
    {
        defaultIn(node);
    }

    public void outASignLValueSignedExpr(ASignLValueSignedExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignLValueSignedExpr(ASignLValueSignedExpr node)
    {
        inASignLValueSignedExpr(node);
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outASignLValueSignedExpr(node);
    }

    public void inASignFuncCallSignedExpr(ASignFuncCallSignedExpr node)
    {
        defaultIn(node);
    }

    public void outASignFuncCallSignedExpr(ASignFuncCallSignedExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignFuncCallSignedExpr(ASignFuncCallSignedExpr node)
    {
        inASignFuncCallSignedExpr(node);
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outASignFuncCallSignedExpr(node);
    }

    public void inASignExprInParsSignedExpr(ASignExprInParsSignedExpr node)
    {
        defaultIn(node);
    }

    public void outASignExprInParsSignedExpr(ASignExprInParsSignedExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignExprInParsSignedExpr(ASignExprInParsSignedExpr node)
    {
        inASignExprInParsSignedExpr(node);
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        if(node.getExprInPars() != null)
        {
            node.getExprInPars().apply(this);
        }
        outASignExprInParsSignedExpr(node);
    }

    public void inASignedExprExpr(ASignedExprExpr node)
    {
        defaultIn(node);
    }

    public void outASignedExprExpr(ASignedExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignedExprExpr(ASignedExprExpr node)
    {
        inASignedExprExpr(node);
        if(node.getSignedExpr() != null)
        {
            node.getSignedExpr().apply(this);
        }
        outASignedExprExpr(node);
    }

    public void inAExprPlusTermExpr(AExprPlusTermExpr node)
    {
        defaultIn(node);
    }

    public void outAExprPlusTermExpr(AExprPlusTermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprPlusTermExpr(AExprPlusTermExpr node)
    {
        inAExprPlusTermExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAExprPlusTermExpr(node);
    }

    public void inAExprMinusTermExpr(AExprMinusTermExpr node)
    {
        defaultIn(node);
    }

    public void outAExprMinusTermExpr(AExprMinusTermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMinusTermExpr(AExprMinusTermExpr node)
    {
        inAExprMinusTermExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAExprMinusTermExpr(node);
    }

    public void inATermExpr(ATermExpr node)
    {
        defaultIn(node);
    }

    public void outATermExpr(ATermExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpr(ATermExpr node)
    {
        inATermExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpr(node);
    }

    public void inATermMultFactorTerm(ATermMultFactorTerm node)
    {
        defaultIn(node);
    }

    public void outATermMultFactorTerm(ATermMultFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermMultFactorTerm(ATermMultFactorTerm node)
    {
        inATermMultFactorTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outATermMultFactorTerm(node);
    }

    public void inATermDivFactorTerm(ATermDivFactorTerm node)
    {
        defaultIn(node);
    }

    public void outATermDivFactorTerm(ATermDivFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermDivFactorTerm(ATermDivFactorTerm node)
    {
        inATermDivFactorTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outATermDivFactorTerm(node);
    }

    public void inATermModFactorTerm(ATermModFactorTerm node)
    {
        defaultIn(node);
    }

    public void outATermModFactorTerm(ATermModFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermModFactorTerm(ATermModFactorTerm node)
    {
        inATermModFactorTerm(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outATermModFactorTerm(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAIntConstFactor(AIntConstFactor node)
    {
        defaultIn(node);
    }

    public void outAIntConstFactor(AIntConstFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntConstFactor(AIntConstFactor node)
    {
        inAIntConstFactor(node);
        if(node.getIntConst() != null)
        {
            node.getIntConst().apply(this);
        }
        outAIntConstFactor(node);
    }

    public void inACharConstFactor(ACharConstFactor node)
    {
        defaultIn(node);
    }

    public void outACharConstFactor(ACharConstFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharConstFactor(ACharConstFactor node)
    {
        inACharConstFactor(node);
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outACharConstFactor(node);
    }

    public void inALValueFactor(ALValueFactor node)
    {
        defaultIn(node);
    }

    public void outALValueFactor(ALValueFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValueFactor(ALValueFactor node)
    {
        inALValueFactor(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outALValueFactor(node);
    }

    public void inAFuncCallFactor(AFuncCallFactor node)
    {
        defaultIn(node);
    }

    public void outAFuncCallFactor(AFuncCallFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallFactor(AFuncCallFactor node)
    {
        inAFuncCallFactor(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallFactor(node);
    }

    public void inAExprInParsFactor(AExprInParsFactor node)
    {
        defaultIn(node);
    }

    public void outAExprInParsFactor(AExprInParsFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprInParsFactor(AExprInParsFactor node)
    {
        inAExprInParsFactor(node);
        if(node.getExprInPars() != null)
        {
            node.getExprInPars().apply(this);
        }
        outAExprInParsFactor(node);
    }

    public void inAExprInPars(AExprInPars node)
    {
        defaultIn(node);
    }

    public void outAExprInPars(AExprInPars node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprInPars(AExprInPars node)
    {
        inAExprInPars(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExprInPars(node);
    }

    public void inAAnd1Boolop(AAnd1Boolop node)
    {
        defaultIn(node);
    }

    public void outAAnd1Boolop(AAnd1Boolop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnd1Boolop(AAnd1Boolop node)
    {
        inAAnd1Boolop(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAnd1Boolop(node);
    }

    public void inAOr1Boolop(AOr1Boolop node)
    {
        defaultIn(node);
    }

    public void outAOr1Boolop(AOr1Boolop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOr1Boolop(AOr1Boolop node)
    {
        inAOr1Boolop(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOr1Boolop(node);
    }

    public void inAEqual2Numop(AEqual2Numop node)
    {
        defaultIn(node);
    }

    public void outAEqual2Numop(AEqual2Numop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqual2Numop(AEqual2Numop node)
    {
        inAEqual2Numop(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqual2Numop(node);
    }

    public void inAHashtag2Numop(AHashtag2Numop node)
    {
        defaultIn(node);
    }

    public void outAHashtag2Numop(AHashtag2Numop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHashtag2Numop(AHashtag2Numop node)
    {
        inAHashtag2Numop(node);
        if(node.getHashtag() != null)
        {
            node.getHashtag().apply(this);
        }
        outAHashtag2Numop(node);
    }

    public void inAUnequal2Numop(AUnequal2Numop node)
    {
        defaultIn(node);
    }

    public void outAUnequal2Numop(AUnequal2Numop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnequal2Numop(AUnequal2Numop node)
    {
        inAUnequal2Numop(node);
        if(node.getUnequal() != null)
        {
            node.getUnequal().apply(this);
        }
        outAUnequal2Numop(node);
    }

    public void inALesser2Numop(ALesser2Numop node)
    {
        defaultIn(node);
    }

    public void outALesser2Numop(ALesser2Numop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALesser2Numop(ALesser2Numop node)
    {
        inALesser2Numop(node);
        if(node.getLesser() != null)
        {
            node.getLesser().apply(this);
        }
        outALesser2Numop(node);
    }

    public void inAGreater2Numop(AGreater2Numop node)
    {
        defaultIn(node);
    }

    public void outAGreater2Numop(AGreater2Numop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreater2Numop(AGreater2Numop node)
    {
        inAGreater2Numop(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreater2Numop(node);
    }

    public void inALesseq2Numop(ALesseq2Numop node)
    {
        defaultIn(node);
    }

    public void outALesseq2Numop(ALesseq2Numop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALesseq2Numop(ALesseq2Numop node)
    {
        inALesseq2Numop(node);
        if(node.getLesseq() != null)
        {
            node.getLesseq().apply(this);
        }
        outALesseq2Numop(node);
    }

    public void inAGreateq2Numop(AGreateq2Numop node)
    {
        defaultIn(node);
    }

    public void outAGreateq2Numop(AGreateq2Numop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreateq2Numop(AGreateq2Numop node)
    {
        inAGreateq2Numop(node);
        if(node.getGreateq() != null)
        {
            node.getGreateq().apply(this);
        }
        outAGreateq2Numop(node);
    }

    public void inANotNotCondNotCond(ANotNotCondNotCond node)
    {
        defaultIn(node);
    }

    public void outANotNotCondNotCond(ANotNotCondNotCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotNotCondNotCond(ANotNotCondNotCond node)
    {
        inANotNotCondNotCond(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getNotCond() != null)
        {
            node.getNotCond().apply(this);
        }
        outANotNotCondNotCond(node);
    }

    public void inANotTermcondNotCond(ANotTermcondNotCond node)
    {
        defaultIn(node);
    }

    public void outANotTermcondNotCond(ANotTermcondNotCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotTermcondNotCond(ANotTermcondNotCond node)
    {
        inANotTermcondNotCond(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getTermcond() != null)
        {
            node.getTermcond().apply(this);
        }
        outANotTermcondNotCond(node);
    }

    public void inANotCondCond(ANotCondCond node)
    {
        defaultIn(node);
    }

    public void outANotCondCond(ANotCondCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotCondCond(ANotCondCond node)
    {
        inANotCondCond(node);
        if(node.getNotCond() != null)
        {
            node.getNotCond().apply(this);
        }
        outANotCondCond(node);
    }

    public void inACondAndTermcondCond(ACondAndTermcondCond node)
    {
        defaultIn(node);
    }

    public void outACondAndTermcondCond(ACondAndTermcondCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondAndTermcondCond(ACondAndTermcondCond node)
    {
        inACondAndTermcondCond(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getTermcond() != null)
        {
            node.getTermcond().apply(this);
        }
        outACondAndTermcondCond(node);
    }

    public void inACondOrTermcondCond(ACondOrTermcondCond node)
    {
        defaultIn(node);
    }

    public void outACondOrTermcondCond(ACondOrTermcondCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondOrTermcondCond(ACondOrTermcondCond node)
    {
        inACondOrTermcondCond(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getTermcond() != null)
        {
            node.getTermcond().apply(this);
        }
        outACondOrTermcondCond(node);
    }

    public void inATermcondCond(ATermcondCond node)
    {
        defaultIn(node);
    }

    public void outATermcondCond(ATermcondCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermcondCond(ATermcondCond node)
    {
        inATermcondCond(node);
        if(node.getTermcond() != null)
        {
            node.getTermcond().apply(this);
        }
        outATermcondCond(node);
    }

    public void inACondInParsTermcond(ACondInParsTermcond node)
    {
        defaultIn(node);
    }

    public void outACondInParsTermcond(ACondInParsTermcond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondInParsTermcond(ACondInParsTermcond node)
    {
        inACondInParsTermcond(node);
        if(node.getCondInPars() != null)
        {
            node.getCondInPars().apply(this);
        }
        outACondInParsTermcond(node);
    }

    public void inAExprNumopExprTermcond(AExprNumopExprTermcond node)
    {
        defaultIn(node);
    }

    public void outAExprNumopExprTermcond(AExprNumopExprTermcond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNumopExprTermcond(AExprNumopExprTermcond node)
    {
        inAExprNumopExprTermcond(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getNumopExpr() != null)
        {
            node.getNumopExpr().apply(this);
        }
        outAExprNumopExprTermcond(node);
    }

    public void inANumopExpr(ANumopExpr node)
    {
        defaultIn(node);
    }

    public void outANumopExpr(ANumopExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumopExpr(ANumopExpr node)
    {
        inANumopExpr(node);
        if(node.getNumop() != null)
        {
            node.getNumop().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outANumopExpr(node);
    }

    public void inACondInPars(ACondInPars node)
    {
        defaultIn(node);
    }

    public void outACondInPars(ACondInPars node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondInPars(ACondInPars node)
    {
        inACondInPars(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACondInPars(node);
    }
}

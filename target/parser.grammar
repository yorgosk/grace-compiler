Package compiler;


Helpers
    all = [0 .. 0xFFFF];
  	digit = ['0' .. '9'];
  	nonzero_digit = ['1' .. '9'];
  	nondigit = ['_' + [['a' .. 'z'] + ['A' .. 'Z']]];
  	digit_sequence = digit+;
  	sign = '+' | '-';
  	hexadecimal_digit = [digit + [['a' .. 'f'] + ['A' .. 'F']]];
  	escape_sequence = '\n' | '\t' | '\r' | '\0' | '\\' | '\' ''' | '\"' | '\x' hexadecimal_digit+ hexadecimal_digit+;
  	cr = 13;
    lf = 10;
    tab = 9;
  	s_char = ''' ([all - [''' + ['"' + ['\' + [lf + cr]]]]] | escape_sequence) ''';
  	s_char_sequence = s_char+;
  	s_string = '"' s_char_sequence '"';
  	not_dollar = [all - '$'];
  	not_double_dollar = [not_dollar - '$'];
  	line_comment = '$' all*;
    multiline_comment = '$$' not_dollar* '$'+ (not_double_dollar not_dollar* '$'+)* '$';

Tokens
    /* keywords */
    and = 'and';
    char = 'char';
    div = 'div';
    do = 'do';
    else = 'else';
    fun = 'fun';
    if = 'if';
    int = 'int';
    mod = 'mod';
    not = 'not';
    nothing = 'nothing';
    or = 'or';
    ref = 'ref';
    return = 'return';
    then = 'then';
    var = 'var';
    while = 'while';

    /* symbolic operators */
    plus = '+';
  	minus = '-';
  	division = '/';
  	mult = '*';
  	hashtag = '#';
  	equal = '=';
  	unequal = '<>';
  	lesser = '<';
  	greater = '>';
  	lesseq = '<=';
  	greateq = '>=';

    /* separators */
    comma = ',';
  	colon = ':';
  	semicolon = ';';
  	assignment = '<-';
  	l_par = '(';
  	r_par = ')';
  	l_bracket = '[';
  	r_bracket = ']';
  	l_brace = '{';
  	r_brace = '}';

  	identifier = nondigit (digit | nondigit)*;
  	blank = (cr | lf | tab | ' ')+;
    comment = line_comment | multiline_comment;

Ignored Tokens
    blank,
  	comment;
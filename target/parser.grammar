Package compiler;


Helpers

    all = [0 .. 255] ;
  	digit = ['0' .. '9'] ;
  	nonzero_digit = ['1' .. '9'] ;
  	letter = ['a' .. 'z'] | ['A' .. 'Z'] ;
  	nondigit = '_' | letter ;
  	sign = '+' | '-' ;
  	hexadecimal_digit = digit | ['a' .. 'f'] | ['A' .. 'F'] ;
  	escape_sequence = '\' ('n' | 't' | 'r' | '0' | '\' | ''' | '"' | ('x' hexadecimal_digit+ hexadecimal_digit+)) ;
  	cr = 13 ;
    lf = 10 ;
    tab = 9 ;
    /*used in one line comments, they are the character without the line-feed, which will be followed by a line feed*/
    no_lf = [all - lf] ;
    s_char = ([all - [''' + ['"' + ['\' + [lf + cr]]]]] | escape_sequence) ;
  	not_dollar = [all - '$'] ;
    /*comments*/
    conatins_one_dollar = not_dollar+ '$' not_dollar+ ;
    conatins_two_dollars = not_dollar+ '$' not_dollar+ '$' not_dollar+ ;


Tokens

    /* keywords */
    and = 'and' ;
    char = 'char' ;
    div = 'div' ;
    do = 'do' ;
    else = 'else' ;
    fun = 'fun' ;
    if = 'if' ;
    int = 'int' ;
    mod = 'mod' ;
    not = 'not' ;
    nothing = 'nothing' ;
    or = 'or' ;
    ref = 'ref' ;
    return = 'return' ;
    then = 'then' ;
    var = 'var' ;
    while = 'while' ;

    /* names */
    id = letter (digit | nondigit)* ;

    /*int and character constants, strings*/
    int_const = digit+ ;
    char_const = ''' s_char ''' ;
    s_char_sequence = (''' s_char ''')+ ;
    string_literal = '"' (s_char+) '"' ;
    erroneous_number = (digit)+ (letter|'_')+;

    /* symbolic operators */
    plus = '+' ;
  	minus = '-' ;
  	mult = '*' ;
  	division = '/' ;
  	hashtag = '#' ;
  	equal = '=' ;
  	lesser = '<' ;
  	greater = '>' ;
  	lesseq = '<=' ;
  	greateq = '>=' ;
  	unequal = '<>' ;

    /* separators */
  	l_par = '(' ;
  	r_par = ')' ;
  	l_bracket = '[' ;
  	r_bracket = ']' ;
  	l_brace = '{' ;
  	r_brace = '}' ;
    comma = ',' ;
  	semicolon = ';' ;
  	colon = ':' ;
  	assignment = '<-' ;

  	identifier = nondigit (digit | nondigit)* ;

  	blank = (cr | lf | tab | ' ')+ ;
    /*they are tokens, so they cannot be used to declare another token*/
    line_comment = '$' not_dollar no_lf* lf ;
    multiline_comment = '$$' not_dollar* '$$' | '$$' conatins_one_dollar* '$$' | '$$' conatins_two_dollars* '$$' ;
    /*the second line, covers things like $$ fwef $ fwefew $ .. $ e $$*/


Ignored Tokens

    blank,
    line_comment,
  	multiline_comment;


Productions

    program = func_def ;

    func_def = header local_def* block ;

    header = fun id l_par header_params? r_par colon ret_type ; /*because, we may have no pars at all e.g. hello example*/
    header_params = fpar_def header_next_arg* ;
    header_next_arg = semicolon fpar_def ;

    fpar_def = ref? id fpar_def_next_id* colon fpar_type ;
    fpar_def_next_id = comma id ;

    data_type =
        {int} int |
        {char} char ;

    type = data_type dimension* ;
    dimension = l_bracket int_const r_bracket ;

    ret_type =
        {data_type} data_type |
        {nothing} nothing ;

    fpar_type = data_type l_r_brackets? next_dimension* ;
    l_r_brackets = l_bracket r_bracket ;
    next_dimension = l_bracket int_const r_bracket ;

    local_def =
        {func_def} func_def |
        {func_decl} func_decl |
        {var_def} var_def ;

    var_def = var id var_def_next_id* colon type semicolon ;
    var_def_next_id = comma id ;

    func_decl = header semicolon ;

    stmt =
        {matched} matched |
        {unmatched} unmatched ;
    matched =
        {if_matched_else_matched} if cond then [then_m]:matched else [else_m]:matched |
        {while_matched} while cond do matched |
        {other} other_stmt ;
    unmatched =
        {if} if cond then stmt |
        {while_unmatched} while cond do unmatched |
        {if_matched_else_unmatched} if cond then matched else unmatched ;
    other_stmt =
        {semicolon} semicolon |
        {assignment} l_value assignment expr semicolon |
        {block} block |
        {function} func_call semicolon |
        {return_expr} return expr? semicolon ;

    block = l_brace stmt* r_brace ;

    func_call = id l_par func_args? r_par ;
    func_args = expr func_call_next_arg* ;
    func_call_next_arg = comma expr;

    l_value =
        {id} id |
        {string} string_literal |
        {expression} l_value l_bracket expr r_bracket ;

    expr =
        {expr_plus_term} expr plus term |
        {expr_minus_term} expr minus term |
        {term} term ;
    term =
        {term_mult_factor} term mult factor |
        {term_div_factor} term div factor |
        {term_division_factor} term division factor |
        {term_mod_factor} term mod factor |
        {factor} factor ;
    factor =
        {int_const} int_const |
        {char_const} char_const |
        {l_value} l_value |
        {func_call} func_call |
        {expr_in_pars} expr_in_pars |
        {signed_expr} signed_expr ;
    expr_in_pars = l_par expr r_par ;
    signed_expr =
        {sign_signed_expr} sign signed_expr |
        {sign_factor} sign factor ;
    sign =
        {plus_sign} plus |
        {minus_sign} minus ;

    cond =
        {not} not_cond |
        {cond_and_termcond} cond and termcond |
        {cond_or_termcond} cond or termcond |
        {termcond} termcond ;
    not_cond =
        {not_not_cond} not not_cond |
        {not_termcond} not termcond ;
    termcond =
        {cond_in_pars} cond_in_pars |
        {expr_numop_expr} expr numop_expr ;
    cond_in_pars = l_par cond r_par ;
    numop_expr = numop expr ;
    numop =
        {equal} equal |
        {hashtag} hashtag |
        {unequal} unequal |
        {lesser} lesser |
        {greater} greater |
        {lesseq} lesseq |
        {greateq} greateq ;
